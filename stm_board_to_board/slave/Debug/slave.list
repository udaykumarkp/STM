
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  2000000c  08005a68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08005a68  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d57  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d6  00000000  00000000  00032ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  000353b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000adc  00000000  00000000  000361e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211e0  00000000  00000000  00036cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fef  00000000  00000000  00057e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3cf  00000000  00000000  0006ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b84  00000000  00000000  0013825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080059f4 	.word	0x080059f4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080059f4 	.word	0x080059f4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t expected_data = 0xAA;
 80005be:	23aa      	movs	r3, #170	; 0xaa
 80005c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fced 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f839 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f9c7 	bl	800095c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005ce:	f000 f89f 	bl	8000710 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f8f9 	bl	80007c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f943 	bl	8000860 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005da:	f000 f98d 	bl	80008f8 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80005de:	f000 f8a3 	bl	8000728 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_SPI_Receive(&hspi1, &received_data, 1, HAL_MAX_DELAY)
 80005e2:	1cb9      	adds	r1, r7, #2
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2201      	movs	r2, #1
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0x7c>)
 80005ec:	f004 fa32 	bl	8004a54 <HAL_SPI_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11a      	bne.n	800062c <main+0x74>
				== HAL_OK) {
			// Check if received data matches the expected data
			if (received_data == expected_data) {
 80005f6:	78bb      	ldrb	r3, [r7, #2]
 80005f8:	78fa      	ldrb	r2, [r7, #3]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d111      	bne.n	8000622 <main+0x6a>
				for (int i = 0; i < 5; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e00a      	b.n	800061a <main+0x62>
					HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000604:	2120      	movs	r1, #32
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x80>)
 8000608:	f000 ffb8 	bl	800157c <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f000 fd42 	bl	8001098 <HAL_Delay>
				for (int i = 0; i < 5; i++) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3301      	adds	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b04      	cmp	r3, #4
 800061e:	ddf1      	ble.n	8000604 <main+0x4c>
 8000620:	e004      	b.n	800062c <main+0x74>
				// Data received correctly
				// Add your logic here (e.g., toggle an LED or perform other actions)
				// Example: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); // Toggle LED on GPIOB pin 13
			} else {

				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin,
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x80>)
 8000628:	f000 ff90 	bl	800154c <HAL_GPIO_WritePin>
				// Data received incorrectly
				// Add error handling or debugging code here
			}
		}

		HAL_Delay(100); // Adjust delay based on communication frequency
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f000 fd33 	bl	8001098 <HAL_Delay>
		if (HAL_SPI_Receive(&hspi1, &received_data, 1, HAL_MAX_DELAY)
 8000632:	e7d6      	b.n	80005e2 <main+0x2a>
 8000634:	20000028 	.word	0x20000028
 8000638:	42020000 	.word	0x42020000

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09c      	sub	sp, #112	; 0x70
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2250      	movs	r2, #80	; 0x50
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 f9a5 	bl	800599a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <SystemClock_Config+0xd0>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000668:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800066c:	6113      	str	r3, [r2, #16]
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xd0>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067a:	bf00      	nop
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xd0>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	2b08      	cmp	r3, #8
 8000686:	d1f9      	bne.n	800067c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000688:	2321      	movs	r3, #33	; 0x21
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800069c:	2303      	movs	r3, #3
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006a0:	230c      	movs	r3, #12
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006a4:	23fa      	movs	r3, #250	; 0xfa
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006b4:	2304      	movs	r3, #4
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f881 	bl	80017cc <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 f9f6 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	231f      	movs	r3, #31
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fca2 	bl	800203c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f9df 	bl	8000ac0 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	; 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	44020800 	.word	0x44020800

08000710 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000714:	f000 ff4c 	bl	80015b0 <HAL_ICACHE_Enable>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800071e:	f000 f9cf 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_SPI1_Init+0x98>)
 800072e:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <MX_SPI1_Init+0x9c>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_SPI1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000740:	2207      	movs	r2, #7
 8000742:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_SPI1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_SPI1_Init+0x98>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_SPI1_Init+0x98>)
 80007ac:	f004 f856 	bl	800485c <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 f983 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <MX_USART1_UART_Init+0x94>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_USART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000812:	f004 fb7c 	bl	8004f0e <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f000 f950 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000824:	f004 ff94 	bl	8005750 <HAL_UARTEx_SetTxFifoThreshold>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f947 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4808      	ldr	r0, [pc, #32]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000836:	f004 ffc9 	bl	80057cc <HAL_UARTEx_SetRxFifoThreshold>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f93e 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000846:	f004 ff4a 	bl	80056de <HAL_UARTEx_DisableFifoMode>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f936 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b8 	.word	0x200000b8
 800085c:	40013800 	.word	0x40013800

08000860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <MX_USART3_UART_Init+0x94>)
 8000868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a8:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008aa:	f004 fb30 	bl	8004f0e <HAL_UART_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b4:	f000 f904 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008bc:	f004 ff48 	bl	8005750 <HAL_UARTEx_SetTxFifoThreshold>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008c6:	f000 f8fb 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008ce:	f004 ff7d 	bl	80057cc <HAL_UARTEx_SetRxFifoThreshold>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d8:	f000 f8f2 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008de:	f004 fefe 	bl	80056de <HAL_UARTEx_DisableFifoMode>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f8ea 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000014c 	.word	0x2000014c
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_USB_PCD_Init+0x60>)
 8000900:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000904:	2208      	movs	r2, #8
 8000906:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 800090a:	2202      	movs	r2, #2
 800090c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000910:	2202      	movs	r2, #2
 8000912:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USB_PCD_Init+0x5c>)
 8000940:	f000 fe46 	bl	80015d0 <HAL_PCD_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 f8b9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001e0 	.word	0x200001e0
 8000958:	40016000 	.word	0x40016000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <MX_GPIO_Init+0x150>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000978:	4a4c      	ldr	r2, [pc, #304]	; (8000aac <MX_GPIO_Init+0x150>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000982:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <MX_GPIO_Init+0x150>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <MX_GPIO_Init+0x150>)
 8000992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000996:	4a45      	ldr	r2, [pc, #276]	; (8000aac <MX_GPIO_Init+0x150>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009a0:	4b42      	ldr	r3, [pc, #264]	; (8000aac <MX_GPIO_Init+0x150>)
 80009a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_GPIO_Init+0x150>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b4:	4a3d      	ldr	r2, [pc, #244]	; (8000aac <MX_GPIO_Init+0x150>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MX_GPIO_Init+0x150>)
 80009c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_GPIO_Init+0x150>)
 80009ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d2:	4a36      	ldr	r2, [pc, #216]	; (8000aac <MX_GPIO_Init+0x150>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <MX_GPIO_Init+0x150>)
 80009de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MX_GPIO_Init+0x150>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f0:	4a2e      	ldr	r2, [pc, #184]	; (8000aac <MX_GPIO_Init+0x150>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_GPIO_Init+0x150>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0x154>)
 8000a0e:	f000 fd9d 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a18:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0x158>)
 8000a1a:	f000 fd97 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 8000a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0x15c>)
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x158>)
 8000a34:	f000 fc38 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0x154>)
 8000a50:	f000 fc2a 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_GPIO_Init+0x154>)
 8000a6a:	f000 fc1d 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <MX_GPIO_Init+0x158>)
 8000a88:	f000 fc0e 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_GPIO_Init+0x15c>)
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_GPIO_Init+0x160>)
 8000aa0:	f000 fc02 	bl	80012a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	44020c00 	.word	0x44020c00
 8000ab0:	42020000 	.word	0x42020000
 8000ab4:	42020800 	.word	0x42020800
 8000ab8:	10110000 	.word	0x10110000
 8000abc:	42020c00 	.word	0x42020c00

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>

08000aca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ac      	sub	sp, #176	; 0xb0
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2288      	movs	r2, #136	; 0x88
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 ff4e 	bl	800599a <memset>
  if(hspi->Instance==SPI1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d159      	bne.n	8000bbc <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000b08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000b14:	2300      	movs	r3, #0
 8000b16:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fdcf 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000b28:	f7ff ffca 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b38:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> SPI1_SCK
    PC1     ------> SPI1_NSS
    PC2     ------> SPI1_MISO
    PC3     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b80:	2305      	movs	r3, #5
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480f      	ldr	r0, [pc, #60]	; (8000bcc <HAL_SPI_MspInit+0xf4>)
 8000b8e:	f000 fb8b 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	230e      	movs	r3, #14
 8000b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0xf4>)
 8000bb8:	f000 fb76 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	37b0      	adds	r7, #176	; 0xb0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	44020c00 	.word	0x44020c00
 8000bcc:	42020800 	.word	0x42020800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0ae      	sub	sp, #184	; 0xb8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	2288      	movs	r2, #136	; 0x88
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fed2 	bl	800599a <memset>
  if(huart->Instance==USART1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_UART_MspInit+0x15c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d146      	bne.n	8000c8e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c00:	f04f 0201 	mov.w	r2, #1
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fd53 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000c20:	f7ff ff4e 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c2a:	4a41      	ldr	r2, [pc, #260]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c48:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c52:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000c60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c84:	4619      	mov	r1, r3
 8000c86:	482b      	ldr	r0, [pc, #172]	; (8000d34 <HAL_UART_MspInit+0x164>)
 8000c88:	f000 fb0e 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c8c:	e049      	b.n	8000d22 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <HAL_UART_MspInit+0x168>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d144      	bne.n	8000d22 <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c98:	f04f 0204 	mov.w	r2, #4
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fd07 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000cb8:	f7ff ff02 	bl	8000ac0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x160>)
 8000cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000cf8:	2318      	movs	r3, #24
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000d10:	230d      	movs	r3, #13
 8000d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <HAL_UART_MspInit+0x16c>)
 8000d1e:	f000 fac3 	bl	80012a8 <HAL_GPIO_Init>
}
 8000d22:	bf00      	nop
 8000d24:	37b8      	adds	r7, #184	; 0xb8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	44020c00 	.word	0x44020c00
 8000d34:	42020400 	.word	0x42020400
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	42020000 	.word	0x42020000

08000d40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ac      	sub	sp, #176	; 0xb0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2288      	movs	r2, #136	; 0x88
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 fe1a 	bl	800599a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_PCD_MspInit+0xc8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d146      	bne.n	8000dfe <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0310 	mov.w	r3, #16
 8000d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000d7c:	2330      	movs	r3, #48	; 0x30
 8000d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fc9a 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000d92:	f7ff fe95 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8000db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <HAL_PCD_MspInit+0xd0>)
 8000ddc:	f000 fa64 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_PCD_MspInit+0xcc>)
 8000df2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	37b0      	adds	r7, #176	; 0xb0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40016000 	.word	0x40016000
 8000e0c:	44020c00 	.word	0x44020c00
 8000e10:	42020000 	.word	0x42020000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8fa 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <SystemInit+0xc8>)
 8000e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <SystemInit+0xc8>)
 8000e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <SystemInit+0xcc>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <SystemInit+0xcc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SystemInit+0xcc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <SystemInit+0xcc>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4927      	ldr	r1, [pc, #156]	; (8000f34 <SystemInit+0xcc>)
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <SystemInit+0xd0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <SystemInit+0xcc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <SystemInit+0xcc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <SystemInit+0xcc>)
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <SystemInit+0xd4>)
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <SystemInit+0xcc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <SystemInit+0xcc>)
 8000eb6:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemInit+0xd4>)
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <SystemInit+0xcc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <SystemInit+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <SystemInit+0xcc>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <SystemInit+0xcc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <SystemInit+0xc8>)
 8000ed4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <SystemInit+0xd8>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000ee2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000eea:	d003      	beq.n	8000ef4 <SystemInit+0x8c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000ef2:	d117      	bne.n	8000f24 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <SystemInit+0xd8>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <SystemInit+0xd8>)
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <SystemInit+0xdc>)
 8000f04:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SystemInit+0xd8>)
 8000f08:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <SystemInit+0xe0>)
 8000f0a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <SystemInit+0xd8>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <SystemInit+0xd8>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <SystemInit+0xd8>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <SystemInit+0xd8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	61d3      	str	r3, [r2, #28]
  }
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	44020c00 	.word	0x44020c00
 8000f38:	fae2eae3 	.word	0xfae2eae3
 8000f3c:	01010280 	.word	0x01010280
 8000f40:	40022000 	.word	0x40022000
 8000f44:	08192a3b 	.word	0x08192a3b
 8000f48:	4c5d6e7f 	.word	0x4c5d6e7f

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
	ldr	r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LoopForever+0x16>)
	cmp	r2, r3
 8000f72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f76:	f7ff ff77 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 fd17 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fb1b 	bl	80005b8 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f84:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000f88:	08005a5c 	.word	0x08005a5c
	ldr	r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f90:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f94:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f98:	200004ec 	.word	0x200004ec

08000f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94d 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000faa:	f001 f9ff 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <HAL_Init+0x44>)
 8000fba:	5ccb      	ldrb	r3, [r1, r3]
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_Init+0x48>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f000 f811 	bl	8000fec <HAL_InitTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e002      	b.n	8000fda <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fd79 	bl	8000aca <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	44020c00 	.word	0x44020c00
 8000fe4:	08005a0c 	.word	0x08005a0c
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e021      	b.n	8001044 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x64>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f939 	bl	800128e <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f911 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x68>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000008 	.word	0x20000008
 8001050:	20000000 	.word	0x20000000
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	200004e8 	.word	0x200004e8

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200004e8 	.word	0x200004e8

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff5e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb2 	bl	8001200 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012b6:	e136      	b.n	8001526 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8128 	beq.w	8001520 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x38>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d125      	bne.n	800132c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f003 020f 	and.w	r2, r3, #15
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	6979      	ldr	r1, [r7, #20]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d00b      	beq.n	8001380 <HAL_GPIO_Init+0xd8>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	2b11      	cmp	r3, #17
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d130      	bne.n	80013e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b6:	2201      	movs	r2, #1
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4013      	ands	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 0201 	and.w	r2, r3, #1
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d017      	beq.n	800141a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4013      	ands	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4313      	orrs	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d07c      	beq.n	8001520 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_GPIO_Init+0x29c>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3318      	adds	r3, #24
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4013      	ands	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0a9a      	lsrs	r2, r3, #10
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_GPIO_Init+0x2a0>)
 8001450:	4013      	ands	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	4093      	lsls	r3, r2
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x29c>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3318      	adds	r3, #24
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_GPIO_Init+0x29c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4013      	ands	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001494:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_GPIO_Init+0x29c>)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_GPIO_Init+0x29c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4013      	ands	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x29c>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x29c>)
 80014c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4013      	ands	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_GPIO_Init+0x29c>)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_GPIO_Init+0x29c>)
 80014f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_GPIO_Init+0x29c>)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	3301      	adds	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f aec1 	bne.w	80012b8 <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	44022000 	.word	0x44022000
 8001548:	002f7f7f 	.word	0x002f7f7f

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e002      	b.n	8001570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43d9      	mvns	r1, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	400b      	ands	r3, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_ICACHE_Enable+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_ICACHE_Enable+0x1c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40030400 	.word	0x40030400

080015d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b08f      	sub	sp, #60	; 0x3c
 80015d4:	af0a      	add	r7, sp, #40	; 0x28
 80015d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0cd      	b.n	800177e <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fba2 	bl	8000d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f96b 	bl	80058e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e03e      	b.n	8001692 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	333d      	adds	r3, #61	; 0x3d
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	333c      	adds	r3, #60	; 0x3c
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	333f      	adds	r3, #63	; 0x3f
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	334c      	adds	r3, #76	; 0x4c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3350      	adds	r3, #80	; 0x50
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	3354      	adds	r3, #84	; 0x54
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3301      	adds	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3bb      	bcc.n	8001614 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e044      	b.n	800172c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	3301      	adds	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3b5      	bcc.n	80016a2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	687e      	ldr	r6, [r7, #4]
 800173e:	466d      	mov	r5, sp
 8001740:	f106 0410 	add.w	r4, r6, #16
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001750:	e885 0003 	stmia.w	r5, {r0, r1}
 8001754:	1d33      	adds	r3, r6, #4
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f004 f8fb 	bl	8005954 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2b01      	cmp	r3, #1
 8001774:	d102      	bne.n	800177c <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f805 	bl	8001786 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001786 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f043 0202 	orr.w	r2, r3, #2
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 bc28 	b.w	8002030 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f003 0318 	and.w	r3, r3, #24
 80017e8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80017ea:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d05b      	beq.n	80018b8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b08      	cmp	r3, #8
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x46>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	2b18      	cmp	r3, #24
 800180a:	d114      	bne.n	8001836 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d111      	bne.n	8001836 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bc08 	b.w	8002030 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001820:	4b84      	ldr	r3, [pc, #528]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	4981      	ldr	r1, [pc, #516]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001830:	4313      	orrs	r3, r2
 8001832:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001834:	e040      	b.n	80018b8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d023      	beq.n	8001886 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800183e:	4b7d      	ldr	r3, [pc, #500]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7c      	ldr	r2, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fc19 	bl	8001080 <HAL_GetTick>
 800184e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001852:	f7ff fc15 	bl	8001080 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e3e5      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001864:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	496d      	ldr	r1, [pc, #436]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001880:	4313      	orrs	r3, r2
 8001882:	618b      	str	r3, [r1, #24]
 8001884:	e018      	b.n	80018b8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001886:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6a      	ldr	r2, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800188c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fbf5 	bl	8001080 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800189a:	f7ff fbf1 	bl	8001080 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e3c1      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a0 	beq.w	8001a06 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x10c>
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b18      	cmp	r3, #24
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 8092 	bne.w	8001a06 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e3a4      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x132>
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x160>
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001918:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e041      	b.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d112      	bne.n	800195c <HAL_RCC_OscConfig+0x190>
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3e      	ldr	r2, [pc, #248]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001948:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e029      	b.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001964:	d112      	bne.n	800198c <HAL_RCC_OscConfig+0x1c0>
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e011      	b.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80019aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb62 	bl	8001080 <HAL_GetTick>
 80019bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fb5e 	bl	8001080 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e32e      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x1f4>
 80019de:	e012      	b.n	8001a06 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb4e 	bl	8001080 <HAL_GetTick>
 80019e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fb4a 	bl	8001080 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e31a      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_RCC_OscConfig+0x268>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 809a 	beq.w	8001b48 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x25a>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	2b18      	cmp	r3, #24
 8001a1e:	d149      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d146      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2fe      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
 8001a32:	bf00      	nop
 8001a34:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001a3e:	4b9a      	ldr	r3, [pc, #616]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0218 	and.w	r2, r3, #24
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d014      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a4e:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0218 	bic.w	r2, r3, #24
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	4993      	ldr	r1, [pc, #588]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001a60:	f000 fdd0 	bl	8002604 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a64:	4b91      	ldr	r3, [pc, #580]	; (8001cac <HAL_RCC_OscConfig+0x4e0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fabf 	bl	8000fec <HAL_InitTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e2db      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fb02 	bl	8001080 <HAL_GetTick>
 8001a7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fafe 	bl	8001080 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2ce      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a92:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a9e:	4b82      	ldr	r3, [pc, #520]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	497e      	ldr	r1, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ab2:	e049      	b.n	8001b48 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0218 	bic.w	r2, r3, #24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	4977      	ldr	r1, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fad1 	bl	8001080 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff facd 	bl	8001080 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e29d      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b00:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4966      	ldr	r1, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	610b      	str	r3, [r1, #16]
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff faad 	bl	8001080 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff faa9 	bl	8001080 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e279      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fa88 	bl	8001080 <HAL_GetTick>
 8001b70:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fa84 	bl	8001080 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e254      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b86:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x3a8>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa6b 	bl	8001080 <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa67 	bl	8001080 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e237      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80d2 	beq.w	8001d80 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x4e4>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d118      	bne.n	8001c1a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x4e4>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x4e4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa44 	bl	8001080 <HAL_GetTick>
 8001bf8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff fa40 	bl	8001080 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e210      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x4e4>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x468>
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c32:	e074      	b.n	8001d1e <HAL_RCC_OscConfig+0x552>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4a2>
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c6c:	e057      	b.n	8001d1e <HAL_RCC_OscConfig+0x552>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d11e      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4e8>
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c9c:	4a02      	ldr	r2, [pc, #8]	; (8001ca8 <HAL_RCC_OscConfig+0x4dc>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x552>
 8001ca8:	44020c00 	.word	0x44020c00
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	44020800 	.word	0x44020800
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b85      	cmp	r3, #133	; 0x85
 8001cba:	d118      	bne.n	8001cee <HAL_RCC_OscConfig+0x522>
 8001cbc:	4ba2      	ldr	r3, [pc, #648]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc2:	4aa1      	ldr	r2, [pc, #644]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd2:	4a9d      	ldr	r2, [pc, #628]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce2:	4a99      	ldr	r2, [pc, #612]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cec:	e017      	b.n	8001d1e <HAL_RCC_OscConfig+0x552>
 8001cee:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf4:	4a94      	ldr	r2, [pc, #592]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cfe:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d04:	4a90      	ldr	r2, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d0e:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d14:	4a8c      	ldr	r2, [pc, #560]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d016      	beq.n	8001d54 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff f9ab 	bl	8001080 <HAL_GetTick>
 8001d2a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f9a7 	bl	8001080 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e175      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d44:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ed      	beq.n	8001d2e <HAL_RCC_OscConfig+0x562>
 8001d52:	e015      	b.n	8001d80 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f994 	bl	8001080 <HAL_GetTick>
 8001d58:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f990 	bl	8001080 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e15e      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d72:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ed      	bne.n	8001d5c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d036      	beq.n	8001dfa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d019      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6b      	ldr	r2, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f96e 	bl	8001080 <HAL_GetTick>
 8001da4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001da8:	f7ff f96a 	bl	8001080 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e13a      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5dc>
 8001dc6:	e018      	b.n	8001dfa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f954 	bl	8001080 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ddc:	f7ff f950 	bl	8001080 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e120      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8115 	beq.w	800202e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b18      	cmp	r3, #24
 8001e08:	f000 80af 	beq.w	8001f6a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	f040 8086 	bne.w	8001f22 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f92d 	bl	8001080 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff f929 	bl	8001080 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0f9      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e3c:	4b42      	ldr	r3, [pc, #264]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e50:	f023 0303 	bic.w	r3, r3, #3
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e5c:	0212      	lsls	r2, r2, #8
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	4939      	ldr	r1, [pc, #228]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	628b      	str	r3, [r1, #40]	; 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	3b01      	subs	r3, #1
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	3b01      	subs	r3, #1
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e96:	492c      	ldr	r1, [pc, #176]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ea2:	f023 0310 	bic.w	r3, r3, #16
 8001ea6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f023 020c 	bic.w	r2, r3, #12
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	491f      	ldr	r1, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f023 0220 	bic.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001edc:	491a      	ldr	r1, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f8c1 	bl	8001080 <HAL_GetTick>
 8001efe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f02:	f7ff f8bd 	bl	8001080 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e08d      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x736>
 8001f20:	e085      	b.n	800202e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_RCC_OscConfig+0x77c>)
 8001f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f8a7 	bl	8001080 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f8a3 	bl	8001080 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d903      	bls.n	8001f4c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e073      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
 8001f48:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	4a36      	ldr	r2, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001f5e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	6293      	str	r3, [r2, #40]	; 0x28
 8001f68:	e061      	b.n	800202e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d031      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d12a      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d122      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d11a      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0a5b      	lsrs	r3, r3, #9
 8001fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d111      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d108      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	08db      	lsrs	r3, r3, #3
 8001fec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d01a      	beq.n	800202e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8001ffe:	f023 0310 	bic.w	r3, r3, #16
 8002002:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f83c 	bl	8001080 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800200a:	bf00      	nop
 800200c:	f7ff f838 	bl	8001080 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4293      	cmp	r3, r2
 8002016:	d0f9      	beq.n	800200c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_RCC_OscConfig+0x86c>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	44020c00 	.word	0x44020c00

0800203c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e19e      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b83      	ldr	r3, [pc, #524]	; (8002260 <HAL_RCC_ClockConfig+0x224>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_ClockConfig+0x224>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 020f 	bic.w	r2, r3, #15
 8002066:	497e      	ldr	r1, [pc, #504]	; (8002260 <HAL_RCC_ClockConfig+0x224>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b7c      	ldr	r3, [pc, #496]	; (8002260 <HAL_RCC_ClockConfig+0x224>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e186      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	4b74      	ldr	r3, [pc, #464]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800209a:	429a      	cmp	r2, r3
 800209c:	d909      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800209e:	4b71      	ldr	r3, [pc, #452]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	496d      	ldr	r1, [pc, #436]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d909      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020d0:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4961      	ldr	r1, [pc, #388]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4955      	ldr	r1, [pc, #340]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 800210e:	4313      	orrs	r3, r2
 8002110:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	429a      	cmp	r2, r3
 800212c:	d908      	bls.n	8002140 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f023 020f 	bic.w	r2, r3, #15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	494a      	ldr	r1, [pc, #296]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 800213c:	4313      	orrs	r3, r2
 800213e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8093 	beq.w	8002274 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e113      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e107      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0fb      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0f3      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	492c      	ldr	r1, [pc, #176]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe ff62 	bl	8001080 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d112      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe ff5a 	bl	8001080 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0d7      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0318 	and.w	r3, r3, #24
 80021e6:	2b18      	cmp	r3, #24
 80021e8:	d1ee      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x18c>
 80021ea:	e043      	b.n	8002274 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d112      	bne.n	800221a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe ff43 	bl	8001080 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0c0      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 0318 	and.w	r3, r3, #24
 8002214:	2b10      	cmp	r3, #16
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
 8002218:	e02c      	b.n	8002274 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d122      	bne.n	8002268 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe ff2c 	bl	8001080 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0a9      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x228>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0318 	and.w	r3, r3, #24
 8002242:	2b08      	cmp	r3, #8
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_ClockConfig+0x1e8>
 8002246:	e015      	b.n	8002274 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe ff1a 	bl	8001080 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d906      	bls.n	8002268 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e097      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 0318 	and.w	r3, r3, #24
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	429a      	cmp	r2, r3
 800228e:	d208      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f023 020f 	bic.w	r2, r3, #15
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	493e      	ldr	r1, [pc, #248]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_ClockConfig+0x360>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d210      	bcs.n	80022d2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCC_ClockConfig+0x360>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 020f 	bic.w	r2, r3, #15
 80022b8:	4938      	ldr	r1, [pc, #224]	; (800239c <HAL_RCC_ClockConfig+0x360>)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_ClockConfig+0x360>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e05d      	b.n	800238e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d208      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231a:	429a      	cmp	r2, r3
 800231c:	d209      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	491a      	ldr	r1, [pc, #104]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800234c:	429a      	cmp	r2, r3
 800234e:	d209      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002364:	f000 f822 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x35c>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490b      	ldr	r1, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x364>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x368>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x36c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fe32 	bl	8000fec <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800238c:	7afb      	ldrb	r3, [r7, #11]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	44020c00 	.word	0x44020c00
 800239c:	40022000 	.word	0x40022000
 80023a0:	08005a0c 	.word	0x08005a0c
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80023b2:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0318 	and.w	r3, r3, #24
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023be:	4b8a      	ldr	r3, [pc, #552]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e107      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c4:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 0318 	and.w	r3, r3, #24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d112      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d009      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_RCC_GetSysClockFreq+0x240>)
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e0f1      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <HAL_RCC_GetSysClockFreq+0x240>)
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	e0ee      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f6:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0318 	and.w	r3, r3, #24
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d102      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x244>)
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e0e5      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f003 0318 	and.w	r3, r3, #24
 8002410:	2b18      	cmp	r3, #24
 8002412:	f040 80dd 	bne.w	80025d0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002416:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800242c:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800243c:	08db      	lsrs	r3, r3, #3
 800243e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002450:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80b7 	beq.w	80025ca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0xbe>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d056      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x16a>
 8002468:	e077      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800246a:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02d      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_RCC_GetSysClockFreq+0x240>)
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x248>
 80024b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024cc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80024d0:	e065      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024dc:	eddf 6a46 	vldr	s13, [pc, #280]	; 80025f8 <HAL_RCC_GetSysClockFreq+0x24c>
 80024e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x248>
 80024fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002500:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002508:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002514:	e043      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002520:	eddf 6a36 	vldr	s13, [pc, #216]	; 80025fc <HAL_RCC_GetSysClockFreq+0x250>
 8002524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002528:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002538:	ed97 6a02 	vldr	s12, [r7, #8]
 800253c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x248>
 8002540:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002544:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002558:	e021      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002564:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002600 <HAL_RCC_GetSysClockFreq+0x254>
 8002568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800257c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002580:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x248>
 8002584:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002588:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800258c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002590:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800259c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a8:	3301      	adds	r3, #1
 80025aa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80025ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c2:	ee17 3a90 	vmov	r3, s15
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e004      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e001      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetSysClockFreq+0x240>)
 80025d2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80025d4:	69fb      	ldr	r3, [r7, #28]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	44020c00 	.word	0x44020c00
 80025e8:	003d0900 	.word	0x003d0900
 80025ec:	03d09000 	.word	0x03d09000
 80025f0:	016e3600 	.word	0x016e3600
 80025f4:	46000000 	.word	0x46000000
 80025f8:	4c742400 	.word	0x4c742400
 80025fc:	4bb71b00 	.word	0x4bb71b00
 8002600:	4a742400 	.word	0x4a742400

08002604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002608:	f7ff fed0 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002612:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002616:	4907      	ldr	r1, [pc, #28]	; (8002634 <HAL_RCC_GetHCLKFreq+0x30>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800261a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_RCC_GetHCLKFreq+0x34>)
 8002624:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_GetHCLKFreq+0x34>)
 8002628:	681b      	ldr	r3, [r3, #0]
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	44020c00 	.word	0x44020c00
 8002634:	08005a0c 	.word	0x08005a0c
 8002638:	20000000 	.word	0x20000000

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002640:	f7ff ffe0 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	44020c00 	.word	0x44020c00
 8002664:	08005a1c 	.word	0x08005a1c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800266c:	f7ff ffca 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	44020c00 	.word	0x44020c00
 8002690:	08005a1c 	.word	0x08005a1c

08002694 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002698:	f7ff ffb4 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	0b1b      	lsrs	r3, r3, #12
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK3Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	44020c00 	.word	0x44020c00
 80026bc:	08005a1c 	.word	0x08005a1c

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80026c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c4:	b0aa      	sub	sp, #168	; 0xa8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80026d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80026e4:	2500      	movs	r5, #0
 80026e6:	ea54 0305 	orrs.w	r3, r4, r5
 80026ea:	d00b      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80026ec:	4bb8      	ldr	r3, [pc, #736]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f2:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4ab4      	ldr	r2, [pc, #720]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f002 0801 	and.w	r8, r2, #1
 8002710:	f04f 0900 	mov.w	r9, #0
 8002714:	ea58 0309 	orrs.w	r3, r8, r9
 8002718:	d038      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800271a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	2b05      	cmp	r3, #5
 8002722:	d819      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	08002761 	.word	0x08002761
 8002730:	08002745 	.word	0x08002745
 8002734:	08002759 	.word	0x08002759
 8002738:	08002761 	.word	0x08002761
 800273c:	08002761 	.word	0x08002761
 8002740:	08002761 	.word	0x08002761
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002748:	3308      	adds	r3, #8
 800274a:	4618      	mov	r0, r3
 800274c:	f001 ffee 	bl	800472c <RCCEx_PLL2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002756:	e004      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800275e:	e000      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002762:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800276a:	4b99      	ldr	r3, [pc, #612]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800276c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002770:	f023 0107 	bic.w	r1, r3, #7
 8002774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	4a95      	ldr	r2, [pc, #596]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800277c:	430b      	orrs	r3, r1
 800277e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002782:	e003      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002788:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f002 0a02 	and.w	sl, r2, #2
 8002798:	f04f 0b00 	mov.w	fp, #0
 800279c:	ea5a 030b 	orrs.w	r3, sl, fp
 80027a0:	d03c      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80027a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	2b28      	cmp	r3, #40	; 0x28
 80027aa:	d01b      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80027ac:	2b28      	cmp	r3, #40	; 0x28
 80027ae:	d815      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d019      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d811      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80027b8:	2b18      	cmp	r3, #24
 80027ba:	d017      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80027bc:	2b18      	cmp	r3, #24
 80027be:	d80d      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d109      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027cc:	3308      	adds	r3, #8
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 ffac 	bl	800472c <RCCEx_PLL2_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80027da:	e00a      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80027e2:	e006      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80027e4:	bf00      	nop
 80027e6:	e004      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80027e8:	bf00      	nop
 80027ea:	e002      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80027f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80027fa:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002800:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800280c:	430b      	orrs	r3, r1
 800280e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002812:	e003      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002818:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f002 0304 	and.w	r3, r2, #4
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002832:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002836:	460b      	mov	r3, r1
 8002838:	4313      	orrs	r3, r2
 800283a:	d040      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800283c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002846:	d01e      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002848:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800284c:	d817      	bhi.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d01a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002858:	d811      	bhi.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800285a:	2bc0      	cmp	r3, #192	; 0xc0
 800285c:	d017      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800285e:	2bc0      	cmp	r3, #192	; 0xc0
 8002860:	d80d      	bhi.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d109      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800286a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800286e:	3308      	adds	r3, #8
 8002870:	4618      	mov	r0, r3
 8002872:	f001 ff5b 	bl	800472c <RCCEx_PLL2_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 800287c:	e00a      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002884:	e006      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002886:	bf00      	nop
 8002888:	e004      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800288a:	bf00      	nop
 800288c:	e002      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002894:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800289e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028a2:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80028a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80028ba:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80028ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80028d8:	460b      	mov	r3, r1
 80028da:	4313      	orrs	r3, r2
 80028dc:	d043      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80028de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80028e8:	d021      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80028ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80028ee:	d81a      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80028f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f4:	d01d      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80028f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fa:	d814      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80028fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002900:	d019      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002906:	d80e      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d109      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002916:	3308      	adds	r3, #8
 8002918:	4618      	mov	r0, r3
 800291a:	f001 ff07 	bl	800472c <RCCEx_PLL2_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002924:	e00a      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800293a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10c      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800294e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002962:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002972:	67bb      	str	r3, [r7, #120]	; 0x78
 8002974:	2300      	movs	r3, #0
 8002976:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002978:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800297c:	460b      	mov	r3, r1
 800297e:	4313      	orrs	r3, r2
 8002980:	d03e      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800298c:	d01b      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800298e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002992:	d814      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002998:	d017      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800299a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800299e:	d80e      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d109      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ae:	3308      	adds	r3, #8
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 febb 	bl	800472c <RCCEx_PLL2_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80029bc:	e00b      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80029c4:	e007      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80029c6:	bf00      	nop
 80029c8:	e005      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80029ca:	bf00      	nop
 80029cc:	e003      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80029ce:	bf00      	nop
 80029d0:	44020c00 	.word	0x44020c00
        break;
 80029d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80029de:	4ba5      	ldr	r3, [pc, #660]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80029e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80029e4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80029e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4aa1      	ldr	r2, [pc, #644]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80029f0:	430b      	orrs	r3, r1
 80029f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80029f6:	e003      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029fc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a0e:	2300      	movs	r3, #0
 8002a10:	677b      	str	r3, [r7, #116]	; 0x74
 8002a12:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002a16:	460b      	mov	r3, r1
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a26:	d01b      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002a28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a2c:	d814      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002a2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a32:	d017      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002a34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a38:	d80e      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d014      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a48:	3308      	adds	r3, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fe6e 	bl	800472c <RCCEx_PLL2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002a56:	e008      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002a5e:	e004      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002a60:	bf00      	nop
 8002a62:	e002      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002a72:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a78:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a84:	430b      	orrs	r3, r1
 8002a86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002a8a:	e003      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a90:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aa6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4313      	orrs	r3, r2
 8002aae:	d033      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aba:	d015      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac0:	d80e      	bhi.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fe2a 	bl	800472c <RCCEx_PLL2_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002ade:	e006      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002ae6:	e002      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002ae8:	bf00      	nop
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aee:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002afc:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	4a5b      	ldr	r2, [pc, #364]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b14:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	2100      	movs	r1, #0
 8002b22:	6639      	str	r1, [r7, #96]	; 0x60
 8002b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b28:	667b      	str	r3, [r7, #100]	; 0x64
 8002b2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d033      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b44:	d80e      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b54:	3308      	adds	r3, #8
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fde8 	bl	800472c <RCCEx_PLL2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002b62:	e006      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b72:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b80:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b92:	e003      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b98:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002be2:	653b      	str	r3, [r7, #80]	; 0x50
 8002be4:	2300      	movs	r3, #0
 8002be6:	657b      	str	r3, [r7, #84]	; 0x54
 8002be8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002bec:	460b      	mov	r3, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	d046      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002bfc:	d021      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002bfe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c02:	d81a      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c08:	d01d      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d814      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c14:	d019      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1a:	d80e      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d109      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fd7d 	bl	800472c <RCCEx_PLL2_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10f      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c5e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	4a02      	ldr	r2, [pc, #8]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c72:	bf00      	nop
 8002c74:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002c7c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c8e:	2300      	movs	r3, #0
 8002c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d043      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ca6:	d021      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002ca8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002cac:	d81a      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb8:	d814      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002cba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cbe:	d019      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc4:	d80e      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fd28 	bl	800472c <RCCEx_PLL2_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002cea:	e006      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002cec:	bf00      	nop
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d02:	4bb6      	ldr	r3, [pc, #728]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	4ab2      	ldr	r2, [pc, #712]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d1a:	e003      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d20:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	2300      	movs	r3, #0
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	d030      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d80f      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d211      	bcs.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d911      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d109      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fce5 	bl	800472c <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002d68:	e006      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002d70:	e002      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d78:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d86:	f023 0107 	bic.w	r1, r3, #7
 8002d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d90:	4a92      	ldr	r2, [pc, #584]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d9e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	2100      	movs	r1, #0
 8002dac:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002db8:	460b      	mov	r3, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002de2:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de8:	f023 0108 	bic.w	r1, r3, #8
 8002dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df2:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dfa:	e003      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e00:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
 8002e16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f000 80b0 	beq.w	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002e22:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2e:	f7fe f927 	bl	8001080 <HAL_GetTick>
 8002e32:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e36:	e00b      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe f922 	bl	8001080 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d903      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e50:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ed      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002e5c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 808a 	bne.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002e74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d022      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e82:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d01b      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e98:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea8:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eae:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb8:	4a48      	ldr	r2, [pc, #288]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d019      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe f8d7 	bl	8001080 <HAL_GetTick>
 8002ed2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	e00d      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe f8d2 	bl	8001080 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d903      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8002ef2:	e006      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ea      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002f02:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d132      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f34:	430b      	orrs	r3, r1
 8002f36:	61d3      	str	r3, [r2, #28]
 8002f38:	e005      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f44:	61d3      	str	r3, [r2, #28]
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f58:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8002f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f6e:	e008      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f70:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f74:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f7e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	d038      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa4:	2b30      	cmp	r3, #48	; 0x30
 8002fa6:	d014      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002fa8:	2b30      	cmp	r3, #48	; 0x30
 8002faa:	d80e      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d012      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d80a      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d106      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc6:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8002fc8:	e00d      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e007      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8002fda:	bf00      	nop
 8002fdc:	44020c00 	.word	0x44020c00
 8002fe0:	44020800 	.word	0x44020800
        break;
 8002fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002fee:	4bb5      	ldr	r3, [pc, #724]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	49b1      	ldr	r1, [pc, #708]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003006:	e003      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800300c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800301c:	623b      	str	r3, [r7, #32]
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003026:	460b      	mov	r3, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	d03c      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800302c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	2b04      	cmp	r3, #4
 8003034:	d81d      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003051 	.word	0x08003051
 8003040:	0800305f 	.word	0x0800305f
 8003044:	08003073 	.word	0x08003073
 8003048:	0800307b 	.word	0x0800307b
 800304c:	0800307b 	.word	0x0800307b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b9c      	ldr	r3, [pc, #624]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	4a9b      	ldr	r2, [pc, #620]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800305c:	e00e      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800305e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003062:	3308      	adds	r3, #8
 8003064:	4618      	mov	r0, r3
 8003066:	f001 fb61 	bl	800472c <RCCEx_PLL2_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003070:	e004      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003078:	e000      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800307a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800307c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10c      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003094:	498b      	ldr	r1, [pc, #556]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80030a2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80030a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80030bc:	460b      	mov	r3, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	d03c      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80030c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d01f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d819      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80030d0:	2b18      	cmp	r3, #24
 80030d2:	d01d      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80030d4:	2b18      	cmp	r3, #24
 80030d6:	d815      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d007      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80030e0:	e010      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e2:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	4a77      	ldr	r2, [pc, #476]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80030ee:	e010      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030f4:	3308      	adds	r3, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 fb18 	bl	800472c <RCCEx_PLL2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003102:	e006      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800310a:	e002      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003112:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800311a:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003124:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4966      	ldr	r1, [pc, #408]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003132:	e003      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003138:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800313c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003152:	460b      	mov	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	d03e      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d020      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d819      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xade>
 800316a:	2bc0      	cmp	r3, #192	; 0xc0
 800316c:	d01d      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800316e:	2bc0      	cmp	r3, #192	; 0xc0
 8003170:	d815      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d007      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800317a:	e010      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317c:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003186:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003188:	e010      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800318a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800318e:	3308      	adds	r3, #8
 8003190:	4618      	mov	r0, r3
 8003192:	f001 facb 	bl	800472c <RCCEx_PLL2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800319c:	e006      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80031a4:	e002      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80031aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10c      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	493f      	ldr	r1, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80031d2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	2100      	movs	r1, #0
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	d038      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80031f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d00e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80031fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003202:	d815      	bhi.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d110      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800321a:	e00e      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800321c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003220:	3308      	adds	r3, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f001 fa82 	bl	800472c <RCCEx_PLL2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	491c      	ldr	r1, [pc, #112]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003260:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	2100      	movs	r1, #0
 800326e:	6039      	str	r1, [r7, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e9d7 1200 	ldrd	r1, r2, [r7]
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d039      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003286:	2b30      	cmp	r3, #48	; 0x30
 8003288:	d01e      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800328a:	2b30      	cmp	r3, #48	; 0x30
 800328c:	d815      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800328e:	2b10      	cmp	r3, #16
 8003290:	d002      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003292:	2b20      	cmp	r3, #32
 8003294:	d007      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003296:	e010      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800329e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80032a4:	e011      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032aa:	3308      	adds	r3, #8
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 fa3d 	bl	800472c <RCCEx_PLL2_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80032b8:	e007      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80032c2:	bf00      	nop
 80032c4:	44020c00 	.word	0x44020c00
        break;
 80032c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80032ea:	e003      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032f0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80032f4:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	37a8      	adds	r7, #168	; 0xa8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	44020c00 	.word	0x44020c00

08003308 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003310:	4bad      	ldr	r3, [pc, #692]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003318:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800331a:	4bab      	ldr	r3, [pc, #684]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003324:	4ba8      	ldr	r3, [pc, #672]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003330:	4ba5      	ldr	r3, [pc, #660]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800333a:	4ba3      	ldr	r3, [pc, #652]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8126 	beq.w	80035aa <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d053      	beq.n	800340c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d86f      	bhi.n	800344a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d003      	beq.n	8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d02b      	beq.n	80033ce <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003376:	e068      	b.n	800344a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003378:	4b93      	ldr	r3, [pc, #588]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	4a92      	ldr	r2, [pc, #584]	; (80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80033b0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80033b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80033cc:	e068      	b.n	80034a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80035d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80033dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80033ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80033f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800340a:	e049      	b.n	80034a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	eddf 6a70 	vldr	s13, [pc, #448]	; 80035d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800341a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003428:	ed97 6a04 	vldr	s12, [r7, #16]
 800342c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003448:	e02a      	b.n	80034a0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800344a:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	4a5d      	ldr	r2, [pc, #372]	; (80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003482:	eddf 5a53 	vldr	s11, [pc, #332]	; 80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800349e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ac:	d121      	bne.n	80034f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	0a5b      	lsrs	r3, r3, #9
 80034c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80034cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80034d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80034d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e002      	b.n	80034f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003504:	d121      	bne.n	800354a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003506:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003528:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800352c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003538:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355c:	d121      	bne.n	80035a2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	0e1b      	lsrs	r3, r3, #24
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800357c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003580:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003584:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003598:	e010      	b.n	80035bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	e00c      	b.n	80035bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	e008      	b.n	80035bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	372c      	adds	r7, #44	; 0x2c
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	44020c00 	.word	0x44020c00
 80035cc:	03d09000 	.word	0x03d09000
 80035d0:	46000000 	.word	0x46000000
 80035d4:	4a742400 	.word	0x4a742400
 80035d8:	4bb71b00 	.word	0x4bb71b00

080035dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80035dc:	b480      	push	{r7}
 80035de:	b08b      	sub	sp, #44	; 0x2c
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80035e4:	4bad      	ldr	r3, [pc, #692]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80035ee:	4bab      	ldr	r3, [pc, #684]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80035f8:	4ba8      	ldr	r3, [pc, #672]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003602:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003604:	4ba5      	ldr	r3, [pc, #660]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800360e:	4ba3      	ldr	r3, [pc, #652]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003626:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8126 	beq.w	800387e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d053      	beq.n	80036e0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d86f      	bhi.n	800371e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d02b      	beq.n	80036a2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800364a:	e068      	b.n	800371e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800364c:	4b93      	ldr	r3, [pc, #588]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	4a92      	ldr	r2, [pc, #584]	; (80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	ee07 3a90 	vmov	s15, r3
 800367c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003680:	ed97 6a04 	vldr	s12, [r7, #16]
 8003684:	eddf 5a87 	vldr	s11, [pc, #540]	; 80038a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80036a0:	e068      	b.n	8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ac:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a04 	vldr	s12, [r7, #16]
 80036c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80036de:	e049      	b.n	8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a70 	vldr	s13, [pc, #448]	; 80038ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8003700:	eddf 5a68 	vldr	s11, [pc, #416]	; 80038a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800371c:	e02a      	b.n	8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800371e:	4b5f      	ldr	r3, [pc, #380]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	08db      	lsrs	r3, r3, #3
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a04 	vldr	s12, [r7, #16]
 8003756:	eddf 5a53 	vldr	s11, [pc, #332]	; 80038a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003772:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003774:	4b49      	ldr	r3, [pc, #292]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003780:	d121      	bne.n	80037c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003782:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800378e:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	0a5b      	lsrs	r3, r3, #9
 8003794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80037a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80037a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80037ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e006      	b.n	80037cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80037cc:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d8:	d121      	bne.n	800381e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80037da:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d017      	beq.n	8003816 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037e6:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80037f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003800:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800380c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003830:	d121      	bne.n	8003876 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	0e1b      	lsrs	r3, r3, #24
 8003844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003854:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003858:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800385c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003864:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800386c:	e010      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	e00c      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	e008      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	372c      	adds	r7, #44	; 0x2c
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	44020c00 	.word	0x44020c00
 80038a0:	03d09000 	.word	0x03d09000
 80038a4:	46000000 	.word	0x46000000
 80038a8:	4a742400 	.word	0x4a742400
 80038ac:	4bb71b00 	.word	0x4bb71b00

080038b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	; 0x30
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80038ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038be:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80038c2:	430b      	orrs	r3, r1
 80038c4:	d14b      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038c6:	4bc4      	ldr	r3, [pc, #784]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80038c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80038d2:	4bc1      	ldr	r3, [pc, #772]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80038d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d108      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d104      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80038e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	f000 bf14 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80038f2:	4bb9      	ldr	r3, [pc, #740]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80038f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003900:	d108      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d104      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800390a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003910:	f000 bf03 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003914:	4bb0      	ldr	r3, [pc, #704]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003920:	d119      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003928:	d115      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800392a:	4bab      	ldr	r3, [pc, #684]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003936:	d30a      	bcc.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003938:	4ba7      	ldr	r3, [pc, #668]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003942:	4aa6      	ldr	r2, [pc, #664]	; (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800394a:	f000 bee6 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003952:	f000 bee2 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	f000 bede 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800395e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003962:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 8003966:	ea52 0301 	orrs.w	r3, r2, r1
 800396a:	f000 838e 	beq.w	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003972:	2a01      	cmp	r2, #1
 8003974:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 8003978:	f080 86cc 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800397c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003980:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8003984:	ea52 0301 	orrs.w	r3, r2, r1
 8003988:	f000 82aa 	beq.w	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800398c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003990:	2a01      	cmp	r2, #1
 8003992:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 8003996:	f080 86bd 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800399a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399e:	f1a3 0110 	sub.w	r1, r3, #16
 80039a2:	ea52 0301 	orrs.w	r3, r2, r1
 80039a6:	f000 8681 	beq.w	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80039aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	f173 0310 	sbcs.w	r3, r3, #16
 80039b4:	f080 86ae 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039bc:	1f19      	subs	r1, r3, #4
 80039be:	ea52 0301 	orrs.w	r3, r2, r1
 80039c2:	f000 84b1 	beq.w	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80039c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ca:	2a01      	cmp	r2, #1
 80039cc:	f173 0304 	sbcs.w	r3, r3, #4
 80039d0:	f080 86a0 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d8:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 80039dc:	430b      	orrs	r3, r1
 80039de:	f000 85aa 	beq.w	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80039e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e6:	497e      	ldr	r1, [pc, #504]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80039e8:	428a      	cmp	r2, r1
 80039ea:	f173 0300 	sbcs.w	r3, r3, #0
 80039ee:	f080 8691 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f000 8532 	beq.w	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a04:	4977      	ldr	r1, [pc, #476]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003a06:	428a      	cmp	r2, r1
 8003a08:	f173 0300 	sbcs.w	r3, r3, #0
 8003a0c:	f080 8682 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a14:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	f000 84bc 	beq.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8003a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a22:	4971      	ldr	r1, [pc, #452]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003a24:	428a      	cmp	r2, r1
 8003a26:	f173 0300 	sbcs.w	r3, r3, #0
 8003a2a:	f080 8673 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a32:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8003a36:	430b      	orrs	r3, r1
 8003a38:	f000 85f2 	beq.w	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8003a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a40:	496a      	ldr	r1, [pc, #424]	; (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003a42:	428a      	cmp	r2, r1
 8003a44:	f173 0300 	sbcs.w	r3, r3, #0
 8003a48:	f080 8664 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a50:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8003a54:	430b      	orrs	r3, r1
 8003a56:	f000 81e5 	beq.w	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a5e:	4964      	ldr	r1, [pc, #400]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003a60:	428a      	cmp	r2, r1
 8003a62:	f173 0300 	sbcs.w	r3, r3, #0
 8003a66:	f080 8655 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a6e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003a72:	430b      	orrs	r3, r1
 8003a74:	f000 83cc 	beq.w	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a7c:	495d      	ldr	r1, [pc, #372]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003a7e:	428a      	cmp	r2, r1
 8003a80:	f173 0300 	sbcs.w	r3, r3, #0
 8003a84:	f080 8646 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8c:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8003a90:	430b      	orrs	r3, r1
 8003a92:	f000 8331 	beq.w	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8003a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9a:	4957      	ldr	r1, [pc, #348]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003a9c:	428a      	cmp	r2, r1
 8003a9e:	f173 0300 	sbcs.w	r3, r3, #0
 8003aa2:	f080 8637 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aaa:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	f000 82bb 	beq.w	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8003abc:	f173 0300 	sbcs.w	r3, r3, #0
 8003ac0:	f080 8628 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003acc:	430b      	orrs	r3, r1
 8003ace:	f000 826d 	beq.w	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad6:	f244 0101 	movw	r1, #16385	; 0x4001
 8003ada:	428a      	cmp	r2, r1
 8003adc:	f173 0300 	sbcs.w	r3, r3, #0
 8003ae0:	f080 8618 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f000 821e 	beq.w	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af6:	f242 0101 	movw	r1, #8193	; 0x2001
 8003afa:	428a      	cmp	r2, r1
 8003afc:	f173 0300 	sbcs.w	r3, r3, #0
 8003b00:	f080 8608 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b08:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	f000 8137 	beq.w	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b16:	f241 0101 	movw	r1, #4097	; 0x1001
 8003b1a:	428a      	cmp	r2, r1
 8003b1c:	f173 0300 	sbcs.w	r3, r3, #0
 8003b20:	f080 85f8 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b28:	1f11      	subs	r1, r2, #4
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	f000 80d2 	beq.w	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b34:	2a05      	cmp	r2, #5
 8003b36:	f173 0300 	sbcs.w	r3, r3, #0
 8003b3a:	f080 85eb 	bcs.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b42:	1e51      	subs	r1, r2, #1
 8003b44:	430b      	orrs	r3, r1
 8003b46:	d006      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b4c:	1e91      	subs	r1, r2, #2
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	d06c      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003b52:	f000 bddf 	b.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7fe fd7e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b6e:	f000 bdd4 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b7e:	d10a      	bne.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fd26 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	e048      	b.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bba:	e035      	b.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d119      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	e028      	b.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003bd6:	bf00      	nop
 8003bd8:	44020c00 	.word	0x44020c00
 8003bdc:	016e3600 	.word	0x016e3600
 8003be0:	20000001 	.word	0x20000001
 8003be4:	10000001 	.word	0x10000001
 8003be8:	08000001 	.word	0x08000001
 8003bec:	04000001 	.word	0x04000001
 8003bf0:	00200001 	.word	0x00200001
 8003bf4:	00040001 	.word	0x00040001
 8003bf8:	00020001 	.word	0x00020001
 8003bfc:	03d09000 	.word	0x03d09000
 8003c00:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003c04:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d106      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d103      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c24:	f000 bd79 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c28:	f000 bd77 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003c2c:	4b95      	ldr	r3, [pc, #596]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe fcfd 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003c42:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c44:	f000 bd69 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003c48:	4b8e      	ldr	r3, [pc, #568]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fcbb 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6a:	e031      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003c6c:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d10c      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b18      	cmp	r3, #24
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c7e:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	4a7f      	ldr	r2, [pc, #508]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c90:	e01e      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003c92:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9e:	d105      	bne.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d102      	bne.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003ca6:	4b79      	ldr	r3, [pc, #484]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003caa:	e011      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003cac:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b28      	cmp	r3, #40	; 0x28
 8003cbe:	d103      	bne.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	e003      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ccc:	f000 bd25 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003cd0:	f000 bd23 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ce6:	f7fe fca9 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003cea:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003cec:	f000 bd15 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003cf0:	4b64      	ldr	r3, [pc, #400]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d107      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fc67 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d12:	e033      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003d14:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	08db      	lsrs	r3, r3, #3
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	4a55      	ldr	r2, [pc, #340]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d38:	e020      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003d3a:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d46:	d106      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	e012      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003d56:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d107      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d6a:	d103      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d78:	f000 bccf 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d7c:	f000 bccd 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003d80:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003d92:	f7fe fc7f 	bl	8002694 <HAL_RCC_GetPCLK3Freq>
 8003d96:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d98:	f000 bcbf 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da2:	d108      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fc17 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003db2:	f000 bcb2 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003db6:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d10d      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ddc:	e020      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dea:	d106      	bne.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df2:	d102      	bne.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df8:	e012      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d107      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e0e:	d103      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	e003      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e1c:	f000 bc7d 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e20:	f000 bc7b 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003e36:	f7fe fbe5 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8003e3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003e3c:	f000 bc6d 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d104      	bne.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe fab1 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8003e4c:	f000 bc65 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d108      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fbbe 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e64:	f000 bc59 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e74:	d10e      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	e02c      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003e82:	bf00      	nop
 8003e84:	44020c00 	.word	0x44020c00
 8003e88:	03d09000 	.word	0x03d09000
 8003e8c:	003d0900 	.word	0x003d0900
 8003e90:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003e94:	4b95      	ldr	r3, [pc, #596]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ea6:	4b91      	ldr	r3, [pc, #580]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	4a8f      	ldr	r2, [pc, #572]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb8:	e010      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003eba:	4b8c      	ldr	r3, [pc, #560]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003ece:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ed8:	f000 bc1f 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003edc:	f000 bc1d 	b.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003ee0:	4b82      	ldr	r3, [pc, #520]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003eec:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f06:	e011      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f16:	d106      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d103      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003f1e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8003f2a:	e3f6      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f2c:	e3f5      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f2e:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d103      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fb7c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003f44:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f46:	e3e8      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fb41 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f5e:	e3dc      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003f60:	4b62      	ldr	r3, [pc, #392]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f72:	d109      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f74:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	4a5c      	ldr	r2, [pc, #368]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f86:	e010      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003f88:	4b58      	ldr	r3, [pc, #352]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8003f9e:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fa8:	e3b7      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003faa:	e3b6      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003fac:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fbe:	f7fe fb3d 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fc4:	e3a9      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fcc:	d107      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fb02 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fdc:	e39d      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d10d      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff0:	d109      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	4a3c      	ldr	r2, [pc, #240]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004004:	e010      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d106      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800401a:	d102      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004026:	e378      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004028:	e377      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800402a:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800402c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004030:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fafe 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8004040:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004042:	e36a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800404a:	d107      	bne.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fac3 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800405a:	e35e      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d10d      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406e:	d109      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004070:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004082:	e34a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004088:	e347      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800408c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004090:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800409c:	f7fe fafa 	bl	8002694 <HAL_RCC_GetPCLK3Freq>
 80040a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80040a2:	e33a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040aa:	d107      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fa93 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040ba:	e32e      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10d      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ce:	d109      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	08db      	lsrs	r3, r3, #3
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040e2:	e31a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040e8:	e317      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80040ea:	bf00      	nop
 80040ec:	44020c00 	.word	0x44020c00
 80040f0:	03d09000 	.word	0x03d09000
 80040f4:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80040f8:	4b9b      	ldr	r3, [pc, #620]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800410a:	d044      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004112:	d879      	bhi.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d02d      	beq.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d871      	bhi.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412a:	d017      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004132:	d869      	bhi.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004140:	d004      	beq.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004142:	e061      	b.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004144:	f7fe faa6 	bl	8002694 <HAL_RCC_GetPCLK3Freq>
 8004148:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 800414a:	e060      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fa43 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800415a:	e058      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800415c:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800415e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d103      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004170:	e04d      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004176:	e04a      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004178:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800417a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800417e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004186:	d103      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004188:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800418e:	e03e      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004194:	e03b      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004196:	4b74      	ldr	r3, [pc, #464]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800419c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041a2:	4b71      	ldr	r3, [pc, #452]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041b4:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	4a6b      	ldr	r2, [pc, #428]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	e01e      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041c8:	4b67      	ldr	r3, [pc, #412]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d106      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041dc:	d102      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80041de:	4b64      	ldr	r3, [pc, #400]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e2:	e010      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041e4:	4b60      	ldr	r3, [pc, #384]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f0:	d106      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f8:	d102      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80041fa:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004206:	e002      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800420c:	bf00      	nop
          }
        }
        break;
 800420e:	e284      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004210:	4b55      	ldr	r3, [pc, #340]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004212:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004216:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004222:	d044      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800422a:	d879      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004232:	d02d      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423a:	d871      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004242:	d017      	beq.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800424a:	d869      	bhi.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004258:	d004      	beq.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800425a:	e061      	b.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe f9ee 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8004260:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8004262:	e060      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff f9b7 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004272:	e058      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004274:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d103      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004288:	e04d      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800428e:	e04a      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429e:	d103      	bne.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80042a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80042a6:	e03e      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80042ac:	e03b      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	08db      	lsrs	r3, r3, #3
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042de:	e01e      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d106      	bne.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d102      	bne.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80042f6:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fa:	e010      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004310:	d102      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004316:	e002      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800431e:	e002      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004324:	bf00      	nop
          }
        }
        break;
 8004326:	e1f8      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800432a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004340:	d105      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800434c:	e1e5      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004354:	d110      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004356:	f107 0318 	add.w	r3, r7, #24
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe ffd4 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004364:	e1d9      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004366:	bf00      	nop
 8004368:	44020c00 	.word	0x44020c00
 800436c:	03d09000 	.word	0x03d09000
 8004370:	003d0900 	.word	0x003d0900
 8004374:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d107      	bne.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f929 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800438e:	e1c4      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004394:	e1c1      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004396:	4b9d      	ldr	r3, [pc, #628]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d859      	bhi.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043c5 	.word	0x080043c5
 80043b4:	080043d5 	.word	0x080043d5
 80043b8:	0800445d 	.word	0x0800445d
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043eb 	.word	0x080043eb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043c4:	f107 0318 	add.w	r3, r7, #24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe ff9d 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80043d2:	e046      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff f8ff 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80043e2:	e03e      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80043e4:	4b8a      	ldr	r3, [pc, #552]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80043e8:	e03b      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80043ea:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80043ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80043f6:	4b85      	ldr	r3, [pc, #532]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004408:	4b80      	ldr	r3, [pc, #512]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441a:	e01e      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800441c:	4b7b      	ldr	r3, [pc, #492]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d106      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d102      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004432:	4b79      	ldr	r3, [pc, #484]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004436:	e010      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004438:	4b74      	ldr	r3, [pc, #464]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004444:	d106      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800444c:	d102      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800444e:	4b73      	ldr	r3, [pc, #460]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004452:	e002      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800445a:	e002      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004460:	bf00      	nop
          }
        }
        break;
 8004462:	e15a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004464:	4b69      	ldr	r3, [pc, #420]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b20      	cmp	r3, #32
 8004474:	d022      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2b20      	cmp	r3, #32
 800447a:	d858      	bhi.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	2b18      	cmp	r3, #24
 8004480:	d019      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	2b18      	cmp	r3, #24
 8004486:	d852      	bhi.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b08      	cmp	r3, #8
 8004492:	d008      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004494:	e04b      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004496:	f107 0318 	add.w	r3, r7, #24
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe ff34 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80044a4:	e046      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff f896 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80044b4:	e03e      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80044b6:	4b56      	ldr	r3, [pc, #344]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80044ba:	e03b      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d10c      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044da:	4b4c      	ldr	r3, [pc, #304]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	08db      	lsrs	r3, r3, #3
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ec:	e01e      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fa:	d106      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004502:	d102      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004504:	4b44      	ldr	r3, [pc, #272]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004508:	e010      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800450a:	4b40      	ldr	r3, [pc, #256]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d106      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451e:	d102      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004520:	4b3e      	ldr	r3, [pc, #248]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004524:	e002      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004532:	bf00      	nop
          }
        }
        break;
 8004534:	e0f1      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800453c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d023      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d858      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	2bc0      	cmp	r3, #192	; 0xc0
 8004556:	d019      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2bc0      	cmp	r3, #192	; 0xc0
 800455c:	d852      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d008      	beq.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800456a:	e04b      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800456c:	f107 0318 	add.w	r3, r7, #24
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fec9 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800457a:	e046      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f82b 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800458a:	e03e      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004590:	e03b      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004598:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800459c:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	e01e      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d106      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d102      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045de:	e010      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ec:	d106      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f4:	d102      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	e002      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004600:	e003      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004602:	e002      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004608:	bf00      	nop
          }
        }
        break;
 800460a:	e086      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800460c:	44020c00 	.word	0x44020c00
 8004610:	00bb8000 	.word	0x00bb8000
 8004614:	03d09000 	.word	0x03d09000
 8004618:	003d0900 	.word	0x003d0900
 800461c:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004620:	4b40      	ldr	r3, [pc, #256]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800462c:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d105      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004644:	e031      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004646:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004652:	d10a      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2b10      	cmp	r3, #16
 8004658:	d107      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800465a:	f107 0318 	add.w	r3, r7, #24
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fe52 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	e01f      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800466c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d106      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b20      	cmp	r3, #32
 800467c:	d103      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004684:	e011      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800468c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004694:	d106      	bne.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d103      	bne.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 800469c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a2:	e002      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 80046a8:	e037      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046aa:	e036      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d107      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046be:	f107 0318 	add.w	r3, r7, #24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fe20 	bl	8003308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80046cc:	e025      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80046ce:	4b15      	ldr	r3, [pc, #84]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046da:	d10a      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d107      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe ff78 	bl	80035dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f0:	e00f      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d105      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b30      	cmp	r3, #48	; 0x30
 8004704:	d102      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004706:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470a:	e002      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 8004710:	e003      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004712:	e002      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004718:	bf00      	nop
    }
  }

  return (frequency);
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	44020c00 	.word	0x44020c00
 8004728:	02dc6c00 	.word	0x02dc6c00

0800472c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004734:	4b48      	ldr	r3, [pc, #288]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a47      	ldr	r2, [pc, #284]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 800473a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800473e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004740:	f7fc fc9e 	bl	8001080 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004746:	e008      	b.n	800475a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004748:	f7fc fc9a 	bl	8001080 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e07a      	b.n	8004850 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800475a:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6811      	ldr	r1, [r2, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6852      	ldr	r2, [r2, #4]
 800477a:	0212      	lsls	r2, r2, #8
 800477c:	430a      	orrs	r2, r1
 800477e:	4936      	ldr	r1, [pc, #216]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	3b01      	subs	r3, #1
 800478a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	3b01      	subs	r3, #1
 8004794:	025b      	lsls	r3, r3, #9
 8004796:	b29b      	uxth	r3, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047b4:	4928      	ldr	r1, [pc, #160]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80047ba:	4b27      	ldr	r3, [pc, #156]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f023 020c 	bic.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4924      	ldr	r1, [pc, #144]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f023 0220 	bic.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	491f      	ldr	r1, [pc, #124]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	491c      	ldr	r1, [pc, #112]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004800:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6a12      	ldr	r2, [r2, #32]
 8004808:	00d2      	lsls	r2, r2, #3
 800480a:	4913      	ldr	r1, [pc, #76]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a10      	ldr	r2, [pc, #64]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004816:	f043 0310 	orr.w	r3, r3, #16
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004826:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004828:	f7fc fc2a 	bl	8001080 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800482e:	e008      	b.n	8004842 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004830:	f7fc fc26 	bl	8001080 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e006      	b.n	8004850 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <RCCEx_PLL2_Config+0x12c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0

}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	44020c00 	.word	0x44020c00

0800485c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0e7      	b.n	8004a3e <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <HAL_SPI_Init+0x2c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d901      	bls.n	8004888 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0da      	b.n	8004a3e <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fb25 	bl	8004ed8 <SPI_GetPacketSize>
 800488e:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <HAL_SPI_Init+0x42>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d811      	bhi.n	80048c2 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80048a2:	4a69      	ldr	r2, [pc, #420]	; (8004a48 <HAL_SPI_Init+0x1ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a67      	ldr	r2, [pc, #412]	; (8004a4c <HAL_SPI_Init+0x1f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_SPI_Init+0x60>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a66      	ldr	r2, [pc, #408]	; (8004a50 <HAL_SPI_Init+0x1f4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d104      	bne.n	80048c6 <HAL_SPI_Init+0x6a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d901      	bls.n	80048c6 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0bb      	b.n	8004a3e <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc f8fc 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004902:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800490c:	d119      	bne.n	8004942 <HAL_SPI_Init+0xe6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004916:	d103      	bne.n	8004920 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10c      	bne.n	8004942 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800492c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004930:	d107      	bne.n	8004942 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00f      	beq.n	800496e <HAL_SPI_Init+0x112>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d90b      	bls.n	800496e <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e007      	b.n	800497e <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	ea42 0103 	orr.w	r1, r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	ea42 0103 	orr.w	r1, r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40013000 	.word	0x40013000
 8004a4c:	40003800 	.word	0x40003800
 8004a50:	40003c00 	.word	0x40003c00

08004a54 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3330      	adds	r3, #48	; 0x30
 8004a6e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Receive+0x2a>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e182      	b.n	8004d84 <HAL_SPI_Receive+0x330>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a86:	f7fc fafb 	bl	8001080 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
 8004aa6:	e16d      	b.n	8004d84 <HAL_SPI_Receive+0x330>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Receive+0x60>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d107      	bne.n	8004ac4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8004ac0:	7ffb      	ldrb	r3, [r7, #31]
 8004ac2:	e15f      	b.n	8004d84 <HAL_SPI_Receive+0x330>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004b14:	d108      	bne.n	8004b28 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e009      	b.n	8004b3c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	88f9      	ldrh	r1, [r7, #6]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b68:	d107      	bne.n	8004b7a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d957      	bls.n	8004c32 <HAL_SPI_Receive+0x1de>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a81      	ldr	r2, [pc, #516]	; (8004d8c <HAL_SPI_Receive+0x338>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d04b      	beq.n	8004c24 <HAL_SPI_Receive+0x1d0>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7f      	ldr	r2, [pc, #508]	; (8004d90 <HAL_SPI_Receive+0x33c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d046      	beq.n	8004c24 <HAL_SPI_Receive+0x1d0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	; (8004d94 <HAL_SPI_Receive+0x340>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d148      	bne.n	8004c32 <HAL_SPI_Receive+0x1de>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004ba0:	e040      	b.n	8004c24 <HAL_SPI_Receive+0x1d0>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	f248 0308 	movw	r3, #32776	; 0x8008
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_SPI_Receive+0x188>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bbc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004bda:	e023      	b.n	8004c24 <HAL_SPI_Receive+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bdc:	f7fc fa50 	bl	8001080 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d803      	bhi.n	8004bf4 <HAL_SPI_Receive+0x1a0>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Receive+0x1a6>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d114      	bne.n	8004c24 <HAL_SPI_Receive+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8cc 	bl	8004d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0af      	b.n	8004d84 <HAL_SPI_Receive+0x330>
    while (hspi->RxXferCount > 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1b8      	bne.n	8004ba2 <HAL_SPI_Receive+0x14e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004c30:	e095      	b.n	8004d5e <HAL_SPI_Receive+0x30a>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b07      	cmp	r3, #7
 8004c38:	f240 808b 	bls.w	8004d52 <HAL_SPI_Receive+0x2fe>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004c3c:	e03f      	b.n	8004cbe <HAL_SPI_Receive+0x26a>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d114      	bne.n	8004c76 <HAL_SPI_Receive+0x222>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	8812      	ldrh	r2, [r2, #0]
 8004c54:	b292      	uxth	r2, r2
 8004c56:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004c74:	e023      	b.n	8004cbe <HAL_SPI_Receive+0x26a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fc fa03 	bl	8001080 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Receive+0x23a>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Receive+0x240>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d114      	bne.n	8004cbe <HAL_SPI_Receive+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f87f 	bl	8004d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e062      	b.n	8004d84 <HAL_SPI_Receive+0x330>
    while (hspi->RxXferCount > 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1b9      	bne.n	8004c3e <HAL_SPI_Receive+0x1ea>
 8004cca:	e048      	b.n	8004d5e <HAL_SPI_Receive+0x30a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d117      	bne.n	8004d0a <HAL_SPI_Receive+0x2b6>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004d08:	e023      	b.n	8004d52 <HAL_SPI_Receive+0x2fe>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0a:	f7fc f9b9 	bl	8001080 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d803      	bhi.n	8004d22 <HAL_SPI_Receive+0x2ce>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Receive+0x2d4>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <HAL_SPI_Receive+0x2fe>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f835 	bl	8004d98 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e018      	b.n	8004d84 <HAL_SPI_Receive+0x330>
    while (hspi->RxXferCount > 0UL)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1b6      	bne.n	8004ccc <HAL_SPI_Receive+0x278>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f81a 	bl	8004d98 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_SPI_Receive+0x32e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_SPI_Receive+0x330>
  }
  return errorcode;
 8004d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40013000 	.word	0x40013000
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40003c00 	.word	0x40003c00

08004d98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0210 	orr.w	r2, r2, #16
 8004dc6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004dfa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d014      	beq.n	8004e32 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0220 	orr.w	r2, r2, #32
 8004e30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d014      	beq.n	8004e68 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00f      	beq.n	8004e68 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00f      	beq.n	8004e92 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00f      	beq.n	8004ebc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea2:	f043 0208 	orr.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3307      	adds	r3, #7
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e042      	b.n	8004fa6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb fe4c 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	; 0x24
 8004f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f9a7 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f826 	bl	8004fb0 <UART_SetConfig>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e01b      	b.n	8004fa6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa26 	bl	80053f0 <UART_CheckIdleState>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b094      	sub	sp, #80	; 0x50
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	498a      	ldr	r1, [pc, #552]	; (8005208 <UART_SetConfig+0x258>)
 8004fe0:	4019      	ands	r1, r3
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	68d9      	ldr	r1, [r3, #12]
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	ea40 0301 	orr.w	r3, r0, r1
 8005002:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b7f      	ldr	r3, [pc, #508]	; (800520c <UART_SetConfig+0x25c>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d004      	beq.n	800501e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	4313      	orrs	r3, r2
 800501c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005028:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	430b      	orrs	r3, r1
 8005034:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f023 000f 	bic.w	r0, r3, #15
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	ea40 0301 	orr.w	r3, r0, r1
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <UART_SetConfig+0x260>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d102      	bne.n	800505e <UART_SetConfig+0xae>
 8005058:	2301      	movs	r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	e01a      	b.n	8005094 <UART_SetConfig+0xe4>
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <UART_SetConfig+0x264>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d102      	bne.n	800506e <UART_SetConfig+0xbe>
 8005068:	2302      	movs	r3, #2
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48
 800506c:	e012      	b.n	8005094 <UART_SetConfig+0xe4>
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b69      	ldr	r3, [pc, #420]	; (8005218 <UART_SetConfig+0x268>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d102      	bne.n	800507e <UART_SetConfig+0xce>
 8005078:	2304      	movs	r3, #4
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
 800507c:	e00a      	b.n	8005094 <UART_SetConfig+0xe4>
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b62      	ldr	r3, [pc, #392]	; (800520c <UART_SetConfig+0x25c>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d103      	bne.n	8005090 <UART_SetConfig+0xe0>
 8005088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
 800508e:	e001      	b.n	8005094 <UART_SetConfig+0xe4>
 8005090:	2300      	movs	r3, #0
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b5c      	ldr	r3, [pc, #368]	; (800520c <UART_SetConfig+0x25c>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d171      	bne.n	8005182 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	2200      	movs	r2, #0
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	627a      	str	r2, [r7, #36]	; 0x24
 80050a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050aa:	f7fe fc01 	bl	80038b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80050ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80e2 	beq.w	800527c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	4a57      	ldr	r2, [pc, #348]	; (800521c <UART_SetConfig+0x26c>)
 80050be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c2:	461a      	mov	r2, r3
 80050c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d8:	429a      	cmp	r2, r3
 80050da:	d305      	bcc.n	80050e8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d903      	bls.n	80050f0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80050ee:	e0c5      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	4a47      	ldr	r2, [pc, #284]	; (800521c <UART_SetConfig+0x26c>)
 80050fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005102:	b29b      	uxth	r3, r3
 8005104:	2200      	movs	r2, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	617a      	str	r2, [r7, #20]
 800510a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800510e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005112:	f7fb f8c1 	bl	8000298 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	020b      	lsls	r3, r1, #8
 8005128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800512c:	0202      	lsls	r2, r0, #8
 800512e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005130:	6849      	ldr	r1, [r1, #4]
 8005132:	0849      	lsrs	r1, r1, #1
 8005134:	2000      	movs	r0, #0
 8005136:	460c      	mov	r4, r1
 8005138:	4605      	mov	r5, r0
 800513a:	eb12 0804 	adds.w	r8, r2, r4
 800513e:	eb43 0905 	adc.w	r9, r3, r5
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb f8a0 	bl	8000298 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005166:	d308      	bcc.n	800517a <UART_SetConfig+0x1ca>
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d204      	bcs.n	800517a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e080      	b.n	800527c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005180:	e07c      	b.n	800527c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d149      	bne.n	8005220 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	2200      	movs	r2, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005198:	f7fe fb8a 	bl	80038b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800519c:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d06b      	beq.n	800527c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	4a1c      	ldr	r2, [pc, #112]	; (800521c <UART_SetConfig+0x26c>)
 80051aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	441a      	add	r2, r3
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d916      	bls.n	80051fe <UART_SetConfig+0x24e>
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d6:	d212      	bcs.n	80051fe <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f023 030f 	bic.w	r3, r3, #15
 80051e0:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051f0:	4313      	orrs	r3, r2
 80051f2:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	e03e      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005204:	e03a      	b.n	800527c <UART_SetConfig+0x2cc>
 8005206:	bf00      	nop
 8005208:	cfff69f3 	.word	0xcfff69f3
 800520c:	44002400 	.word	0x44002400
 8005210:	40013800 	.word	0x40013800
 8005214:	40004400 	.word	0x40004400
 8005218:	40004800 	.word	0x40004800
 800521c:	08005a24 	.word	0x08005a24
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005222:	2200      	movs	r2, #0
 8005224:	469a      	mov	sl, r3
 8005226:	4693      	mov	fp, r2
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	f7fe fb40 	bl	80038b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005230:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d021      	beq.n	800527c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <UART_SetConfig+0x2f8>)
 800523e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005242:	461a      	mov	r2, r3
 8005244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005246:	fbb3 f2f2 	udiv	r2, r3, r2
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	441a      	add	r2, r3
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d909      	bls.n	8005276 <UART_SetConfig+0x2c6>
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d205      	bcs.n	8005276 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526c:	b29a      	uxth	r2, r3
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e002      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	2201      	movs	r2, #1
 8005280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2200      	movs	r2, #0
 8005296:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	; 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	08005a24 	.word	0x08005a24

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d10a      	bne.n	80053c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b098      	sub	sp, #96	; 0x60
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fb fe3e 	bl	8001080 <HAL_GetTick>
 8005404:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d12f      	bne.n	8005474 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f88e 	bl	8005544 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d022      	beq.n	8005474 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
 800544e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e063      	b.n	800553c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d149      	bne.n	8005516 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005482:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f857 	bl	8005544 <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03c      	beq.n	8005516 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	623b      	str	r3, [r7, #32]
   return(result);
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
 80054bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ee:	61fa      	str	r2, [r7, #28]
 80054f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	617b      	str	r3, [r7, #20]
   return(result);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e012      	b.n	800553c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3758      	adds	r7, #88	; 0x58
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005554:	e049      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d045      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fb fd8f 	bl	8001080 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <UART_WaitOnFlagUntilTimeout+0x30>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e048      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d031      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d110      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2208      	movs	r2, #8
 800559a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f838 	bl	8005612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2208      	movs	r2, #8
 80055a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e029      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	d111      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f81e 	bl	8005612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e00f      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	429a      	cmp	r2, r3
 8005606:	d0a6      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005612:	b480      	push	{r7}
 8005614:	b095      	sub	sp, #84	; 0x54
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	643b      	str	r3, [r7, #64]	; 0x40
 800563a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	61fb      	str	r3, [r7, #28]
   return(result);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	64bb      	str	r3, [r7, #72]	; 0x48
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e3      	bne.n	800564c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d118      	bne.n	80056be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60bb      	str	r3, [r7, #8]
   return(result);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056d2:	bf00      	nop
 80056d4:	3754      	adds	r7, #84	; 0x54
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e027      	b.n	8005744 <HAL_UARTEx_DisableFifoMode+0x66>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e02d      	b.n	80057c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f84f 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e02d      	b.n	8005840 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	; 0x24
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f811 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005868:	e031      	b.n	80058ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800586a:	2308      	movs	r3, #8
 800586c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800586e:	2308      	movs	r3, #8
 8005870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	0e5b      	lsrs	r3, r3, #25
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	0f5b      	lsrs	r3, r3, #29
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	7b3a      	ldrb	r2, [r7, #12]
 8005896:	4911      	ldr	r1, [pc, #68]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 8005898:	5c8a      	ldrb	r2, [r1, r2]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800589e:	7b3a      	ldrb	r2, [r7, #12]
 80058a0:	490f      	ldr	r1, [pc, #60]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	7b7a      	ldrb	r2, [r7, #13]
 80058b4:	4909      	ldr	r1, [pc, #36]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 80058b6:	5c8a      	ldrb	r2, [r1, r2]
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058bc:	7b7a      	ldrb	r2, [r7, #13]
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	08005a3c 	.word	0x08005a3c
 80058e0:	08005a44 	.word	0x08005a44

080058e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	401a      	ands	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
 800592c:	e00b      	b.n	8005946 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
 8005940:	e001      	b.n	8005946 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f023 0201 	bic.w	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005978:	2100      	movs	r1, #0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ffc7 	bl	800590e <USB_SetCurrentMode>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005996:	b004      	add	sp, #16
 8005998:	4770      	bx	lr

0800599a <memset>:
 800599a:	4402      	add	r2, r0
 800599c:	4603      	mov	r3, r0
 800599e:	4293      	cmp	r3, r2
 80059a0:	d100      	bne.n	80059a4 <memset+0xa>
 80059a2:	4770      	bx	lr
 80059a4:	f803 1b01 	strb.w	r1, [r3], #1
 80059a8:	e7f9      	b.n	800599e <memset+0x4>
	...

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4d0d      	ldr	r5, [pc, #52]	; (80059e4 <__libc_init_array+0x38>)
 80059b0:	2600      	movs	r6, #0
 80059b2:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	4d0b      	ldr	r5, [pc, #44]	; (80059ec <__libc_init_array+0x40>)
 80059be:	2600      	movs	r6, #0
 80059c0:	4c0b      	ldr	r4, [pc, #44]	; (80059f0 <__libc_init_array+0x44>)
 80059c2:	f000 f817 	bl	80059f4 <_init>
 80059c6:	1b64      	subs	r4, r4, r5
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	3601      	adds	r6, #1
 80059d6:	4798      	blx	r3
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	3601      	adds	r6, #1
 80059e0:	4798      	blx	r3
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	08005a54 	.word	0x08005a54
 80059e8:	08005a54 	.word	0x08005a54
 80059ec:	08005a54 	.word	0x08005a54
 80059f0:	08005a58 	.word	0x08005a58

080059f4 <_init>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	bf00      	nop
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr

08005a00 <_fini>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr


test_spi_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c3c  08007c3c  00017c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c58  08007c58  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c60  08007c60  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  2000007c  08007ce4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  08007ce4  00020a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ae3  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ae  00000000  00000000  00034bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00038480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1a  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189a8  00000000  00000000  0003a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180e2  00000000  00000000  00052c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e983  00000000  00000000  0006ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aa0  00000000  00000000  000f96e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fe180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c24 	.word	0x08007c24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08007c24 	.word	0x08007c24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc1b 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f827 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f91f 	bl	8000724 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e6:	f000 f88b 	bl	8000600 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ea:	f000 f8b7 	bl	800065c <MX_I2S2_Init>
  MX_SPI1_Init();
 80004ee:	f000 f8e3 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f2:	f006 ff97 	bl	8007424 <MX_USB_HOST_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		uint8_t tx_data = 0xAA; // Example data to send
 80004f6:	23aa      	movs	r3, #170	; 0xaa
 80004f8:	71fb      	strb	r3, [r7, #7]

		// Transmit data over SPI
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2110      	movs	r1, #16
 80004fe:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x54>)
 8000500:	f000 ff34 	bl	800136c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY);   // Transmit data
 8000504:	1df9      	adds	r1, r7, #7
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	2201      	movs	r2, #1
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x58>)
 800050e:	f004 fc48 	bl	8004da2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2110      	movs	r1, #16
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x54>)
 8000518:	f000 ff28 	bl	800136c <HAL_GPIO_WritePin>

		HAL_Delay(5000); // Delay between transmissions
 800051c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000520:	f000 fc6a 	bl	8000df8 <HAL_Delay>
	while (1) {
 8000524:	e7e7      	b.n	80004f6 <main+0x22>
 8000526:	bf00      	nop
 8000528:	40020800 	.word	0x40020800
 800052c:	20000134 	.word	0x20000134

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fae0 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005a0:	230c      	movs	r3, #12
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005a4:	2360      	movs	r3, #96	; 0x60
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fdd5 	bl	8004164 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f9b0 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f837 	bl	8004654 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f99a 	bl	8000924 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f002 ffad 	bl	800359c <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f96c 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2S2_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_I2S2_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2S2_Init+0x50>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2S2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_I2S2_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_I2S2_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_I2S2_Init+0x50>)
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <MX_I2S2_Init+0x58>)
 8000684:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2S2_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_I2S2_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2S2_Init+0x50>)
 8000694:	2201      	movs	r2, #1
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2S2_Init+0x50>)
 800069a:	f003 f8c3 	bl	8003824 <HAL_I2S_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f93e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000ec 	.word	0x200000ec
 80006b0:	40003800 	.word	0x40003800
 80006b4:	00017700 	.word	0x00017700

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2220      	movs	r2, #32
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f004 fac1 	bl	8004c90 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f906 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000134 	.word	0x20000134
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b74      	ldr	r3, [pc, #464]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a73      	ldr	r2, [pc, #460]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b71      	ldr	r3, [pc, #452]	; (8000910 <MX_GPIO_Init+0x1ec>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b6d      	ldr	r3, [pc, #436]	; (8000910 <MX_GPIO_Init+0x1ec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a6c      	ldr	r2, [pc, #432]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b6a      	ldr	r3, [pc, #424]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b66      	ldr	r3, [pc, #408]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a65      	ldr	r2, [pc, #404]	; (8000910 <MX_GPIO_Init+0x1ec>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b63      	ldr	r3, [pc, #396]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b5f      	ldr	r3, [pc, #380]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a5e      	ldr	r2, [pc, #376]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b58      	ldr	r3, [pc, #352]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a57      	ldr	r2, [pc, #348]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b55      	ldr	r3, [pc, #340]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b51      	ldr	r3, [pc, #324]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a50      	ldr	r2, [pc, #320]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	484b      	ldr	r0, [pc, #300]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80007e8:	f000 fdc0 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4849      	ldr	r0, [pc, #292]	; (8000918 <MX_GPIO_Init+0x1f4>)
 80007f2:	f000 fdbb 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4847      	ldr	r0, [pc, #284]	; (8000918 <MX_GPIO_Init+0x1f4>)
 80007fc:	f000 fdb6 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000800:	2200      	movs	r2, #0
 8000802:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000806:	4845      	ldr	r0, [pc, #276]	; (800091c <MX_GPIO_Init+0x1f8>)
 8000808:	f000 fdb0 	bl	800136c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800080c:	2304      	movs	r3, #4
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	483d      	ldr	r0, [pc, #244]	; (8000914 <MX_GPIO_Init+0x1f0>)
 8000820:	f000 fc20 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000824:	2308      	movs	r3, #8
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4836      	ldr	r0, [pc, #216]	; (8000914 <MX_GPIO_Init+0x1f0>)
 800083c:	f000 fc12 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000840:	2332      	movs	r3, #50	; 0x32
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000844:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482f      	ldr	r0, [pc, #188]	; (8000914 <MX_GPIO_Init+0x1f0>)
 8000856:	f000 fc05 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4;
 800085a:	2311      	movs	r3, #17
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4829      	ldr	r0, [pc, #164]	; (8000918 <MX_GPIO_Init+0x1f4>)
 8000872:	f000 fbf7 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800087a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4825      	ldr	r0, [pc, #148]	; (8000920 <MX_GPIO_Init+0x1fc>)
 800088c:	f000 fbea 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000890:	2310      	movs	r3, #16
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a0:	2306      	movs	r3, #6
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	481d      	ldr	r0, [pc, #116]	; (8000920 <MX_GPIO_Init+0x1fc>)
 80008ac:	f000 fbda 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x1f8>)
 80008ca:	f000 fbcb 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0x1f4>)
 80008ec:	f000 fbba 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_GPIO_Init+0x1f8>)
 8000904:	f000 fbae 	bl	8001064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fb36 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009dc:	f000 fb42 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <HAL_I2S_MspInit+0x118>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d16c      	bne.n	8000b1e <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000a48:	23c8      	movs	r3, #200	; 0xc8
 8000a4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000a50:	2305      	movs	r3, #5
 8000a52:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 ffc7 	bl	80049ec <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000a64:	f7ff ff5e 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <HAL_I2S_MspInit+0x11c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000abc:	2304      	movs	r3, #4
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000acc:	2306      	movs	r3, #6
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <HAL_I2S_MspInit+0x120>)
 8000ad8:	f000 fac4 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000adc:	2308      	movs	r3, #8
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aec:	2305      	movs	r3, #5
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af4:	4619      	mov	r1, r3
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <HAL_I2S_MspInit+0x120>)
 8000af8:	f000 fab4 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0e:	2305      	movs	r3, #5
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_I2S_MspInit+0x124>)
 8000b1a:	f000 faa3 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3740      	adds	r7, #64	; 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40003800 	.word	0x40003800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b92:	23e0      	movs	r3, #224	; 0xe0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_SPI_MspInit+0x8c>)
 8000bae:	f000 fa59 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8d0 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f000 fe9d 	bl	8001960 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000570 	.word	0x20000570

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f006 ff68 	bl	8007b34 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000018c 	.word	0x2000018c
 8000c98:	20000a98 	.word	0x20000a98

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f006 ff27 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fbef 	bl	80004d4 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d04:	08007c68 	.word	0x08007c68
  ldr r2, =_sbss
 8000d08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d0c:	20000a98 	.word	0x20000a98

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdf2 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000190 	.word	0x20000190

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000190 	.word	0x20000190

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e159      	b.n	8001334 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8148 	bne.w	800132e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a2 	beq.w	800132e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a56      	ldr	r2, [pc, #344]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x2ec>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a49      	ldr	r2, [pc, #292]	; (8001354 <HAL_GPIO_Init+0x2f0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x202>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_GPIO_Init+0x2f4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x1fe>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a47      	ldr	r2, [pc, #284]	; (800135c <HAL_GPIO_Init+0x2f8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x1fa>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a46      	ldr	r2, [pc, #280]	; (8001360 <HAL_GPIO_Init+0x2fc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x1f6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a45      	ldr	r2, [pc, #276]	; (8001364 <HAL_GPIO_Init+0x300>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x1f2>
 8001252:	2304      	movs	r3, #4
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001256:	2307      	movs	r3, #7
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x2ec>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f aea2 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af02      	add	r7, sp, #8
 80013a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e059      	b.n	8001464 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f006 f87e 	bl	80074cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013de:	d102      	bne.n	80013e6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 ff6d 	bl	80052ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7c1a      	ldrb	r2, [r3, #16]
 80013f8:	f88d 2000 	strb.w	r2, [sp]
 80013fc:	3304      	adds	r3, #4
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001400:	f003 feee 	bl	80051e0 <USB_CoreInit>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2202      	movs	r2, #2
 800140e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e026      	b.n	8001464 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2101      	movs	r1, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f003 ff65 	bl	80052ec <USB_SetCurrentMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e017      	b.n	8001464 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7c1a      	ldrb	r2, [r3, #16]
 800143c:	f88d 2000 	strb.w	r2, [sp]
 8001440:	3304      	adds	r3, #4
 8001442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001444:	f004 f908 	bl	8005658 <USB_HostInit>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2202      	movs	r2, #2
 8001452:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e004      	b.n	8001464 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af04      	add	r7, sp, #16
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	70fb      	strb	r3, [r7, #3]
 800147e:	460b      	mov	r3, r1
 8001480:	70bb      	strb	r3, [r7, #2]
 8001482:	4613      	mov	r3, r2
 8001484:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001486:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001488:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_HCD_HC_Init+0x2c>
 8001494:	2302      	movs	r3, #2
 8001496:	e09d      	b.n	80015d4 <HAL_HCD_HC_Init+0x168>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3319      	adds	r3, #25
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3314      	adds	r3, #20
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3315      	adds	r3, #21
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3326      	adds	r3, #38	; 0x26
 80014ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80014f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3316      	adds	r3, #22
 800150a:	4602      	mov	r2, r0
 800150c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fbac 	bl	8001c70 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001518:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0a      	bge.n	8001536 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3317      	adds	r3, #23
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e009      	b.n	800154a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3317      	adds	r3, #23
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 f9a6 	bl	80058a0 <USB_GetHostSpeed>
 8001554:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10b      	bne.n	8001576 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800155e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_HCD_HC_Init+0x10a>
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d104      	bne.n	8001576 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2bbc      	cmp	r3, #188	; 0xbc
 8001570:	d901      	bls.n	8001576 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001572:	23bc      	movs	r3, #188	; 0xbc
 8001574:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3318      	adds	r3, #24
 8001586:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800158a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b298      	uxth	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3328      	adds	r3, #40	; 0x28
 80015a0:	4602      	mov	r2, r0
 80015a2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	787c      	ldrb	r4, [r7, #1]
 80015ae:	78ba      	ldrb	r2, [r7, #2]
 80015b0:	78f9      	ldrb	r1, [r7, #3]
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4623      	mov	r3, r4
 80015c2:	f004 f995 	bl	80058f0 <USB_HC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}

080015dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_HCD_HC_Halt+0x1e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e00f      	b.n	800161a <HAL_HCD_HC_Halt+0x3e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fcdb 	bl	8005fc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4603      	mov	r3, r0
 8001634:	70fb      	strb	r3, [r7, #3]
 8001636:	460b      	mov	r3, r1
 8001638:	70bb      	strb	r3, [r7, #2]
 800163a:	4613      	mov	r3, r2
 800163c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3317      	adds	r3, #23
 800164e:	78ba      	ldrb	r2, [r7, #2]
 8001650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	3326      	adds	r3, #38	; 0x26
 8001662:	787a      	ldrb	r2, [r7, #1]
 8001664:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001666:	7c3b      	ldrb	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d114      	bne.n	8001696 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	332a      	adds	r3, #42	; 0x2a
 800167c:	2203      	movs	r2, #3
 800167e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3319      	adds	r3, #25
 8001690:	7f3a      	ldrb	r2, [r7, #28]
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e009      	b.n	80016aa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	332a      	adds	r3, #42	; 0x2a
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016aa:	787b      	ldrb	r3, [r7, #1]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	f200 8102 	bhi.w	80018b6 <HAL_HCD_HC_SubmitRequest+0x292>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080018a1 	.word	0x080018a1
 80016c0:	0800178d 	.word	0x0800178d
 80016c4:	08001817 	.word	0x08001817
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016c8:	7c3b      	ldrb	r3, [r7, #16]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 80f5 	bne.w	80018ba <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d12d      	bne.n	8001732 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016d6:	8b3b      	ldrh	r3, [r7, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	333d      	adds	r3, #61	; 0x3d
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	333d      	adds	r3, #61	; 0x3d
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	332a      	adds	r3, #42	; 0x2a
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800171a:	e0ce      	b.n	80018ba <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	332a      	adds	r3, #42	; 0x2a
 800172c:	2202      	movs	r2, #2
 800172e:	701a      	strb	r2, [r3, #0]
      break;
 8001730:	e0c3      	b.n	80018ba <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	331a      	adds	r3, #26
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	f040 80b8 	bne.w	80018ba <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	333c      	adds	r3, #60	; 0x3c
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10a      	bne.n	8001776 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	332a      	adds	r3, #42	; 0x2a
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
      break;
 8001774:	e0a1      	b.n	80018ba <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	332a      	adds	r3, #42	; 0x2a
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
      break;
 800178a:	e096      	b.n	80018ba <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d120      	bne.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	333d      	adds	r3, #61	; 0x3d
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10a      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	332a      	adds	r3, #42	; 0x2a
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017bc:	e07e      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	332a      	adds	r3, #42	; 0x2a
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
      break;
 80017d2:	e073      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	333c      	adds	r3, #60	; 0x3c
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10a      	bne.n	8001800 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	332a      	adds	r3, #42	; 0x2a
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e05d      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	332a      	adds	r3, #42	; 0x2a
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
      break;
 8001814:	e052      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001816:	78bb      	ldrb	r3, [r7, #2]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d120      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	333d      	adds	r3, #61	; 0x3d
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	332a      	adds	r3, #42	; 0x2a
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001846:	e039      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	332a      	adds	r3, #42	; 0x2a
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e02e      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	333c      	adds	r3, #60	; 0x3c
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	; 0x2a
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e018      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332a      	adds	r3, #42	; 0x2a
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e00d      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	332a      	adds	r3, #42	; 0x2a
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	e002      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018ba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	332c      	adds	r3, #44	; 0x2c
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	8b39      	ldrh	r1, [r7, #24]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4403      	add	r3, r0
 80018e0:	3334      	adds	r3, #52	; 0x34
 80018e2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	334c      	adds	r3, #76	; 0x4c
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	3338      	adds	r3, #56	; 0x38
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3315      	adds	r3, #21
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	334d      	adds	r3, #77	; 0x4d
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	3310      	adds	r3, #16
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	1d19      	adds	r1, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	799b      	ldrb	r3, [r3, #6]
 800194e:	461a      	mov	r2, r3
 8001950:	f004 f8e4 	bl	8005b1c <USB_HC_StartXfer>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop

08001960 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fe2e 	bl	80055d8 <USB_GetMode>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 80fb 	bne.w	8001b7a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fdf1 	bl	8005570 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80f1 	beq.w	8001b78 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fde8 	bl	8005570 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019aa:	d104      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fdd8 	bl	8005570 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ca:	d104      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fdc8 	bl	8005570 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fdb8 	bl	8005570 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fdaa 	bl	8005570 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a26:	d120      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a42:	2110      	movs	r1, #16
 8001a44:	6938      	ldr	r0, [r7, #16]
 8001a46:	f003 fc9d 	bl	8005384 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a4a:	6938      	ldr	r0, [r7, #16]
 8001a4c:	f003 fccc 	bl	80053e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7a5b      	ldrb	r3, [r3, #9]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fea8 	bl	80057b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f005 fdaf 	bl	80075c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fd7e 	bl	8005570 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7e:	d102      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f001 fd17 	bl	80034b4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fd70 	bl	8005570 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d106      	bne.n	8001aa8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f005 fd78 	bl	8007590 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fd5f 	bl	8005570 <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001abc:	d139      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fa6e 	bl	8005fa4 <USB_HC_ReadInterrupt>
 8001ac8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e025      	b.n	8001b1c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d018      	beq.n	8001b16 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d106      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8e9 	bl	8001cda <HCD_HC_IN_IRQHandler>
 8001b08:	e005      	b.n	8001b16 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 ff4b 	bl	80029ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	461a      	mov	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d3d3      	bcc.n	8001ad0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fd1a 	bl	8005570 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d101      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x1ea>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_HCD_IRQHandler+0x1ec>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d014      	beq.n	8001b7a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0210 	bic.w	r2, r2, #16
 8001b5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 fbc8 	bl	80032f6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0210 	orr.w	r2, r2, #16
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	e000      	b.n	8001b7a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b78:	bf00      	nop
    }
  }
}
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_HCD_Start+0x16>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e013      	b.n	8001bbe <HAL_HCD_Start+0x3e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fe42 	bl	800582e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fb7a 	bl	80052a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_HCD_Stop+0x16>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e00d      	b.n	8001bf8 <HAL_HCD_Stop+0x32>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 fb0c 	bl	8006206 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	334c      	adds	r3, #76	; 0x4c
 8001c1c:	781b      	ldrb	r3, [r3, #0]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3338      	adds	r3, #56	; 0x38
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fe34 	bl	80058ce <USB_GetCurrentFrame>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	331a      	adds	r3, #26
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3325      	adds	r3, #37	; 0x25
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3324      	adds	r3, #36	; 0x24
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fc4c 	bl	8005596 <USB_ReadChInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11a      	bne.n	8001d3e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	461a      	mov	r2, r3
 8001d16:	2304      	movs	r3, #4
 8001d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	334d      	adds	r3, #77	; 0x4d
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 f945 	bl	8005fc6 <USB_HC_Halt>
 8001d3c:	e09e      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fc25 	bl	8005596 <USB_ReadChInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d56:	d11b      	bne.n	8001d90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334d      	adds	r3, #77	; 0x4d
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f91c 	bl	8005fc6 <USB_HC_Halt>
 8001d8e:	e075      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fbfc 	bl	8005596 <USB_ReadChInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d11a      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	461a      	mov	r2, r3
 8001db6:	2308      	movs	r3, #8
 8001db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	334d      	adds	r3, #77	; 0x4d
 8001dca:	2206      	movs	r2, #6
 8001dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 f8f5 	bl	8005fc6 <USB_HC_Halt>
 8001ddc:	e04e      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fbd5 	bl	8005596 <USB_ReadChInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df6:	d11b      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	334d      	adds	r3, #77	; 0x4d
 8001e1c:	2209      	movs	r2, #9
 8001e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 f8cc 	bl	8005fc6 <USB_HC_Halt>
 8001e2e:	e025      	b.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 fbac 	bl	8005596 <USB_ReadChInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d119      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	334d      	adds	r3, #77	; 0x4d
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f8a5 	bl	8005fc6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fb86 	bl	8005596 <USB_ReadChInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d112      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 f891 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb6:	6093      	str	r3, [r2, #8]
 8001eb8:	f000 bd75 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fb66 	bl	8005596 <USB_ReadChInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 8128 	bne.w	8002126 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d119      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	0151      	lsls	r1, r2, #5
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	440a      	add	r2, r1
 8001f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	799b      	ldrb	r3, [r3, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01b      	beq.n	8001f72 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3330      	adds	r3, #48	; 0x30
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	1ac9      	subs	r1, r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3338      	adds	r3, #56	; 0x38
 8001f70:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	334d      	adds	r3, #77	; 0x4d
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3344      	adds	r3, #68	; 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3326      	adds	r3, #38	; 0x26
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3326      	adds	r3, #38	; 0x26
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d110      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fff0 	bl	8005fc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	6093      	str	r3, [r2, #8]
 8001ff8:	e03d      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3326      	adds	r3, #38	; 0x26
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d00a      	beq.n	8002026 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3326      	adds	r3, #38	; 0x26
 8002020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002022:	2b01      	cmp	r3, #1
 8002024:	d127      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	0151      	lsls	r1, r2, #5
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	440a      	add	r2, r1
 800203c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002044:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334c      	adds	r3, #76	; 0x4c
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	334c      	adds	r3, #76	; 0x4c
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f005 fab7 	bl	80075e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	799b      	ldrb	r3, [r3, #6]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d13b      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3338      	adds	r3, #56	; 0x38
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4403      	add	r3, r0
 800209e:	3328      	adds	r3, #40	; 0x28
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	1e59      	subs	r1, r3, #1
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4403      	add	r3, r0
 80020b4:	3328      	adds	r3, #40	; 0x28
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8470 	beq.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	333c      	adds	r3, #60	; 0x3c
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	f083 0301 	eor.w	r3, r3, #1
 80020de:	b2d8      	uxtb	r0, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	333c      	adds	r3, #60	; 0x3c
 80020ee:	4602      	mov	r2, r0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	f000 bc58 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	333c      	adds	r3, #60	; 0x3c
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333c      	adds	r3, #60	; 0x3c
 800211e:	4602      	mov	r2, r0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	f000 bc40 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa31 	bl	8005596 <USB_ReadChInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d131      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2320      	movs	r3, #32
 800214e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	331a      	adds	r3, #26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 841f 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	331b      	adds	r3, #27
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	334d      	adds	r3, #77	; 0x4d
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f003 ff14 	bl	8005fc6 <USB_HC_Halt>
 800219e:	f000 bc02 	b.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 f9f3 	bl	8005596 <USB_ReadChInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f040 8305 	bne.w	80027c6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2302      	movs	r3, #2
 80021cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334d      	adds	r3, #77	; 0x4d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d114      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	334d      	adds	r3, #77	; 0x4d
 80021f4:	2202      	movs	r2, #2
 80021f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	334c      	adds	r3, #76	; 0x4c
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e2cc      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	334d      	adds	r3, #77	; 0x4d
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d114      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334d      	adds	r3, #77	; 0x4d
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	334c      	adds	r3, #76	; 0x4c
 8002248:	2205      	movs	r2, #5
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e2ac      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	; 0x4d
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b07      	cmp	r3, #7
 8002262:	d00b      	beq.n	800227c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	334d      	adds	r3, #77	; 0x4d
 8002274:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002276:	2b09      	cmp	r3, #9
 8002278:	f040 80a6 	bne.w	80023c8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	; 0x4d
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	3344      	adds	r3, #68	; 0x44
 80022b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3344      	adds	r3, #68	; 0x44
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d943      	bls.n	8002352 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3344      	adds	r3, #68	; 0x44
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	331a      	adds	r3, #26
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d123      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331b      	adds	r3, #27
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	331c      	adds	r3, #28
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	0151      	lsls	r1, r2, #5
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	440a      	add	r2, r1
 8002332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	; 0x4c
 800234c:	2204      	movs	r2, #4
 800234e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002350:	e229      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	334c      	adds	r3, #76	; 0x4c
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3326      	adds	r3, #38	; 0x26
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3326      	adds	r3, #38	; 0x26
 800238c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800238e:	2b02      	cmp	r3, #2
 8002390:	f040 8209 	bne.w	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023c6:	e1ee      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	; 0x4d
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	f040 80c8 	bne.w	8002570 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334d      	adds	r3, #77	; 0x4d
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	331b      	adds	r3, #27
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 81ce 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3326      	adds	r3, #38	; 0x26
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d16b      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3348      	adds	r3, #72	; 0x48
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	1c59      	adds	r1, r3, #1
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3348      	adds	r3, #72	; 0x48
 8002444:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3348      	adds	r3, #72	; 0x48
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d943      	bls.n	80024e4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3348      	adds	r3, #72	; 0x48
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	331b      	adds	r3, #27
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3344      	adds	r3, #68	; 0x44
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d809      	bhi.n	80024ae <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	331c      	adds	r3, #28
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024cc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	; 0x4c
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e014      	b.n	800250e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	; 0x4c
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e009      	b.n	800250e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334c      	adds	r3, #76	; 0x4c
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3326      	adds	r3, #38	; 0x26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	; 0x26
 8002534:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 8136 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002552:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800255a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e11b      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	; 0x4d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b03      	cmp	r3, #3
 8002584:	f040 8081 	bne.w	800268a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334d      	adds	r3, #77	; 0x4d
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	331b      	adds	r3, #27
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 80fa 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334c      	adds	r3, #76	; 0x4c
 80025c4:	2202      	movs	r2, #2
 80025c6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002606:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002622:	f023 0320 	bic.w	r3, r3, #32
 8002626:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3326      	adds	r3, #38	; 0x26
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3326      	adds	r3, #38	; 0x26
 800264e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002650:	2b02      	cmp	r3, #2
 8002652:	f040 80a9 	bne.w	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800266c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002674:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e08e      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334d      	adds	r3, #77	; 0x4d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d143      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334d      	adds	r3, #77	; 0x4d
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334c      	adds	r3, #76	; 0x4c
 80026c4:	2202      	movs	r2, #2
 80026c6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	; 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3326      	adds	r3, #38	; 0x26
 80026ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d159      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800270a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002712:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e03f      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334d      	adds	r3, #77	; 0x4d
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d126      	bne.n	800278c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334d      	adds	r3, #77	; 0x4d
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3344      	adds	r3, #68	; 0x44
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	3344      	adds	r3, #68	; 0x44
 8002774:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334c      	adds	r3, #76	; 0x4c
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e00d      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	; 0x4d
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f000 8100 	beq.w	80029a4 <HCD_HC_IN_IRQHandler+0xcca>
 80027a4:	e000      	b.n	80027a8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	334c      	adds	r3, #76	; 0x4c
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f004 ff10 	bl	80075e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027c4:	e0ef      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fee1 	bl	8005596 <USB_ReadChInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d12f      	bne.n	800283e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	334d      	adds	r3, #77	; 0x4d
 8002800:	2205      	movs	r2, #5
 8002802:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	331a      	adds	r3, #26
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3344      	adds	r3, #68	; 0x44
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fbc5 	bl	8005fc6 <USB_HC_Halt>
 800283c:	e0b3      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fea5 	bl	8005596 <USB_ReadChInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	f040 80a7 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	; 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d11b      	bne.n	80028a6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3344      	adds	r3, #68	; 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	334d      	adds	r3, #77	; 0x4d
 8002892:	2204      	movs	r2, #4
 8002894:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fb91 	bl	8005fc6 <USB_HC_Halt>
 80028a4:	e03f      	b.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3326      	adds	r3, #38	; 0x26
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3326      	adds	r3, #38	; 0x26
 80028cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d129      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3344      	adds	r3, #68	; 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	799b      	ldrb	r3, [r3, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HCD_HC_IN_IRQHandler+0xc2a>
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	331b      	adds	r3, #27
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d110      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334d      	adds	r3, #77	; 0x4d
 8002914:	2204      	movs	r2, #4
 8002916:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fb50 	bl	8005fc6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	331b      	adds	r3, #27
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d129      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	331b      	adds	r3, #27
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	440a      	add	r2, r1
 8002966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2310      	movs	r3, #16
 80029a0:	6093      	str	r3, [r2, #8]
 80029a2:	e000      	b.n	80029a6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029a4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fde3 	bl	8005596 <USB_ReadChInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d11b      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2304      	movs	r3, #4
 80029ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334d      	adds	r3, #77	; 0x4d
 80029fc:	2207      	movs	r2, #7
 80029fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fadc 	bl	8005fc6 <USB_HC_Halt>
 8002a0e:	f000 bc6f 	b.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 fdbb 	bl	8005596 <USB_ReadChInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	f040 8082 	bne.w	8002b30 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3319      	adds	r3, #25
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d124      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3319      	adds	r3, #25
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	334c      	adds	r3, #76	; 0x4c
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	334d      	adds	r3, #77	; 0x4d
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fa94 	bl	8005fc6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	331a      	adds	r3, #26
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 841d 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	331b      	adds	r3, #27
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 8411 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3326      	adds	r3, #38	; 0x26
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d009      	beq.n	8002af8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	; 0x4d
 8002b08:	2203      	movs	r2, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fa56 	bl	8005fc6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e3df      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fd2c 	bl	8005596 <USB_ReadChInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d111      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fa2d 	bl	8005fc6 <USB_HC_Halt>
 8002b6c:	e3c0      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fd0d 	bl	8005596 <USB_ReadChInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d168      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3344      	adds	r3, #68	; 0x44
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fcf7 	bl	8005596 <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d112      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3319      	adds	r3, #25
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2340      	movs	r3, #64	; 0x40
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	331b      	adds	r3, #27
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	0151      	lsls	r1, r2, #5
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	440a      	add	r2, r1
 8002c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334d      	adds	r3, #77	; 0x4d
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 f9b8 	bl	8005fc6 <USB_HC_Halt>
 8002c56:	e34b      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fc98 	bl	8005596 <USB_ReadChInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d139      	bne.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	; 0x4d
 8002c80:	2205      	movs	r2, #5
 8002c82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	331a      	adds	r3, #26
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3319      	adds	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	; 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f97b 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	6093      	str	r3, [r2, #8]
 8002ce2:	e305      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fc52 	bl	8005596 <USB_ReadChInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11a      	bne.n	8002d32 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	334d      	adds	r3, #77	; 0x4d
 8002d1e:	2206      	movs	r2, #6
 8002d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 f94b 	bl	8005fc6 <USB_HC_Halt>
 8002d30:	e2de      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fc2b 	bl	8005596 <USB_ReadChInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d144      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3344      	adds	r3, #68	; 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	334d      	adds	r3, #77	; 0x4d
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3319      	adds	r3, #25
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d114      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3318      	adds	r3, #24
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 f903 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	6093      	str	r3, [r2, #8]
 8002dd2:	e28d      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fbda 	bl	8005596 <USB_ReadChInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d169      	bne.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	799b      	ldrb	r3, [r3, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	334d      	adds	r3, #77	; 0x4d
 8002e04:	2207      	movs	r2, #7
 8002e06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 f8d8 	bl	8005fc6 <USB_HC_Halt>
 8002e16:	e049      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3344      	adds	r3, #68	; 0x44
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	3344      	adds	r3, #68	; 0x44
 8002e3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d922      	bls.n	8002e98 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	; 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	; 0x4c
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	; 0x4c
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f004 fba7 	bl	80075e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e96:	e009      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334c      	adds	r3, #76	; 0x4c
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	6093      	str	r3, [r2, #8]
 8002ebe:	e217      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fb64 	bl	8005596 <USB_ReadChInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d11b      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	; 0x4d
 8002eea:	2209      	movs	r2, #9
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 f865 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e1ee      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fb3b 	bl	8005596 <USB_ReadChInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	f040 81df 	bne.w	80032ea <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	; 0x4d
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 8093 	bne.w	800307c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334d      	adds	r3, #77	; 0x4d
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334c      	adds	r3, #76	; 0x4c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3326      	adds	r3, #38	; 0x26
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d00b      	beq.n	8002fac <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3326      	adds	r3, #38	; 0x26
 8002fa4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f040 8190 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	799b      	ldrb	r3, [r3, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	333d      	adds	r3, #61	; 0x3d
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	f083 0301 	eor.w	r3, r3, #1
 8002fcc:	b2d8      	uxtb	r0, r3
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333d      	adds	r3, #61	; 0x3d
 8002fdc:	4602      	mov	r2, r0
 8002fde:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	799b      	ldrb	r3, [r3, #6]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8171 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3334      	adds	r3, #52	; 0x34
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8165 	beq.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3334      	adds	r3, #52	; 0x34
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4403      	add	r3, r0
 8003022:	3328      	adds	r3, #40	; 0x28
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	440b      	add	r3, r1
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4403      	add	r3, r0
 8003038:	3328      	adds	r3, #40	; 0x28
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003040:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 813f 	beq.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	333d      	adds	r3, #61	; 0x3d
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	f083 0301 	eor.w	r3, r3, #1
 8003066:	b2d8      	uxtb	r0, r3
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	333d      	adds	r3, #61	; 0x3d
 8003076:	4602      	mov	r2, r0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e127      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334d      	adds	r3, #77	; 0x4d
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d120      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	334d      	adds	r3, #77	; 0x4d
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	331b      	adds	r3, #27
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 8107 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e0fb      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	; 0x4d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d13a      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	; 0x4d
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334c      	adds	r3, #76	; 0x4c
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	331b      	adds	r3, #27
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 80d1 	bne.w	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331b      	adds	r3, #27
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	e0b5      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	334d      	adds	r3, #77	; 0x4d
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d114      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334d      	adds	r3, #77	; 0x4d
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	; 0x4c
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e095      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	; 0x4d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d114      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334d      	adds	r3, #77	; 0x4d
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334c      	adds	r3, #76	; 0x4c
 80031da:	2205      	movs	r2, #5
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e075      	b.n	80032cc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	; 0x4d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	d00a      	beq.n	800320c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	; 0x4d
 8003206:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003208:	2b09      	cmp	r3, #9
 800320a:	d170      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	; 0x4d
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3344      	adds	r3, #68	; 0x44
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4403      	add	r3, r0
 8003240:	3344      	adds	r3, #68	; 0x44
 8003242:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3344      	adds	r3, #68	; 0x44
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d914      	bls.n	8003284 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3344      	adds	r3, #68	; 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334c      	adds	r3, #76	; 0x4c
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003282:	e022      	b.n	80032ca <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334c      	adds	r3, #76	; 0x4c
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334c      	adds	r3, #76	; 0x4c
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f004 f97e 	bl	80075e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032e8:	e002      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80032ee:	bf00      	nop
  }
}
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b08a      	sub	sp, #40	; 0x28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	0c5b      	lsrs	r3, r3, #17
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d004      	beq.n	800333c <HCD_RXQLVL_IRQHandler+0x46>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b05      	cmp	r3, #5
 8003336:	f000 80b6 	beq.w	80034a6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800333a:	e0b7      	b.n	80034ac <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80b3 	beq.w	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	332c      	adds	r3, #44	; 0x2c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a7 	beq.w	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3338      	adds	r3, #56	; 0x38
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	18d1      	adds	r1, r2, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4403      	add	r3, r0
 8003380:	3334      	adds	r3, #52	; 0x34
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4299      	cmp	r1, r3
 8003386:	f200 8083 	bhi.w	8003490 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	332c      	adds	r3, #44	; 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	b292      	uxth	r2, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f002 f88b 	bl	80054c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	332c      	adds	r3, #44	; 0x2c
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	18d1      	adds	r1, r2, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4403      	add	r3, r0
 80033ce:	332c      	adds	r3, #44	; 0x2c
 80033d0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3338      	adds	r3, #56	; 0x38
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	3338      	adds	r3, #56	; 0x38
 80033f8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	0cdb      	lsrs	r3, r3, #19
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3328      	adds	r3, #40	; 0x28
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4293      	cmp	r3, r2
 8003428:	d13f      	bne.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003446:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800344e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	333c      	adds	r3, #60	; 0x3c
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	333c      	adds	r3, #60	; 0x3c
 800348a:	4602      	mov	r2, r0
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	e00c      	b.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	; 0x4c
 80034a0:	2204      	movs	r2, #4
 80034a2:	701a      	strb	r2, [r3, #0]
      break;
 80034a4:	e001      	b.n	80034aa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034aa:	bf00      	nop
  }
}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034e0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d10b      	bne.n	8003504 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f004 f858 	bl	80075ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d132      	bne.n	8003574 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d126      	bne.n	800356e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7a5b      	ldrb	r3, [r3, #9]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d113      	bne.n	8003550 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800352e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003532:	d106      	bne.n	8003542 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f002 f93a 	bl	80057b4 <USB_InitFSLSPClkSel>
 8003540:	e011      	b.n	8003566 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f002 f933 	bl	80057b4 <USB_InitFSLSPClkSel>
 800354e:	e00a      	b.n	8003566 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	79db      	ldrb	r3, [r3, #7]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800355e:	461a      	mov	r2, r3
 8003560:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003564:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f004 f84a 	bl	8007600 <HAL_HCD_PortEnabled_Callback>
 800356c:	e002      	b.n	8003574 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 f854 	bl	800761c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d103      	bne.n	8003586 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0320 	orr.w	r3, r3, #32
 8003584:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6013      	str	r3, [r2, #0]
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e12b      	b.n	8003806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd f9dc 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003600:	f001 f9e0 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a81      	ldr	r2, [pc, #516]	; (8003810 <HAL_I2C_Init+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d807      	bhi.n	8003620 <HAL_I2C_Init+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_I2C_Init+0x278>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e006      	b.n	800362e <HAL_I2C_Init+0x92>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a7d      	ldr	r2, [pc, #500]	; (8003818 <HAL_I2C_Init+0x27c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0e7      	b.n	8003806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a78      	ldr	r2, [pc, #480]	; (800381c <HAL_I2C_Init+0x280>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9b      	lsrs	r3, r3, #18
 8003640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_I2C_Init+0x274>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <HAL_I2C_Init+0xd4>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	e009      	b.n	8003684 <HAL_I2C_Init+0xe8>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a69      	ldr	r2, [pc, #420]	; (8003820 <HAL_I2C_Init+0x284>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003696:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	495c      	ldr	r1, [pc, #368]	; (8003810 <HAL_I2C_Init+0x274>)
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d819      	bhi.n	80036d8 <HAL_I2C_Init+0x13c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e59      	subs	r1, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036b8:	400b      	ands	r3, r1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_I2C_Init+0x138>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e59      	subs	r1, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d2:	e051      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e04f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d111      	bne.n	8003704 <HAL_I2C_Init+0x168>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e012      	b.n	800372a <HAL_I2C_Init+0x18e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x196>
 800372e:	2301      	movs	r3, #1
 8003730:	e022      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10e      	bne.n	8003758 <HAL_I2C_Init+0x1bc>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e58      	subs	r0, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	fbb0 f3f3 	udiv	r3, r0, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003756:	e00f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6911      	ldr	r1, [r2, #16]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	000186a0 	.word	0x000186a0
 8003814:	001e847f 	.word	0x001e847f
 8003818:	003d08ff 	.word	0x003d08ff
 800381c:	431bde83 	.word	0x431bde83
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e128      	b.n	8003a88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a90      	ldr	r2, [pc, #576]	; (8003a90 <HAL_I2S_Init+0x26c>)
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd f8dd 	bl	8000a10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d060      	beq.n	8003944 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800388a:	2310      	movs	r3, #16
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e001      	b.n	8003894 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b20      	cmp	r3, #32
 800389a:	d802      	bhi.n	80038a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f001 f992 	bl	8004bcc <HAL_RCCEx_GetPeriphCLKFreq>
 80038a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b2:	d125      	bne.n	8003900 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	3305      	adds	r3, #5
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e01f      	b.n	800391e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	3305      	adds	r3, #5
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	e00e      	b.n	800391e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fbb2 f2f3 	udiv	r2, r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	fbb2 f3f3 	udiv	r3, r2, r3
 800391a:	3305      	adds	r3, #5
 800391c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_I2S_Init+0x270>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003944:	2302      	movs	r3, #2
 8003946:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d902      	bls.n	8003958 <HAL_I2S_Init+0x134>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	d907      	bls.n	8003968 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e08f      	b.n	8003a88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	430a      	orrs	r2, r1
 800397a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003986:	f023 030f 	bic.w	r3, r3, #15
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6851      	ldr	r1, [r2, #4]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68d2      	ldr	r2, [r2, #12]
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6992      	ldr	r2, [r2, #24]
 800399e:	430a      	orrs	r2, r1
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d161      	bne.n	8003a78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <HAL_I2S_Init+0x274>)
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <HAL_I2S_Init+0x278>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_I2S_Init+0x1a4>
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_I2S_Init+0x27c>)
 80039c6:	e001      	b.n	80039cc <HAL_I2S_Init+0x1a8>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4932      	ldr	r1, [pc, #200]	; (8003a9c <HAL_I2S_Init+0x278>)
 80039d4:	428a      	cmp	r2, r1
 80039d6:	d101      	bne.n	80039dc <HAL_I2S_Init+0x1b8>
 80039d8:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <HAL_I2S_Init+0x27c>)
 80039da:	e001      	b.n	80039e0 <HAL_I2S_Init+0x1bc>
 80039dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039e4:	f023 030f 	bic.w	r3, r3, #15
 80039e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <HAL_I2S_Init+0x278>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_I2S_Init+0x1d4>
 80039f4:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <HAL_I2S_Init+0x27c>)
 80039f6:	e001      	b.n	80039fc <HAL_I2S_Init+0x1d8>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	2202      	movs	r2, #2
 80039fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_I2S_Init+0x278>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_I2S_Init+0x1ea>
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_I2S_Init+0x27c>)
 8003a0c:	e001      	b.n	8003a12 <HAL_I2S_Init+0x1ee>
 8003a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d003      	beq.n	8003a28 <HAL_I2S_Init+0x204>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d103      	bne.n	8003a30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e001      	b.n	8003a34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_I2S_Init+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2S_Init+0x24c>
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_I2S_Init+0x27c>)
 8003a6e:	e001      	b.n	8003a74 <HAL_I2S_Init+0x250>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	897a      	ldrh	r2, [r7, #10]
 8003a76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08003b9b 	.word	0x08003b9b
 8003a94:	cccccccd 	.word	0xcccccccd
 8003a98:	08003cb1 	.word	0x08003cb1
 8003a9c:	40003800 	.word	0x40003800
 8003aa0:	40003400 	.word	0x40003400

08003aa4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffb8 	bl	8003aa4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10e      	bne.n	8003b92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff93 	bl	8003ab8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d13a      	bne.n	8003c2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d109      	bne.n	8003bd4 <I2S_IRQHandler+0x3a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d102      	bne.n	8003bd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ffb4 	bl	8003b3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d126      	bne.n	8003c2c <I2S_IRQHandler+0x92>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d11f      	bne.n	8003c2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff50 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d136      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d109      	bne.n	8003c56 <I2S_IRQHandler+0xbc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d102      	bne.n	8003c56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff45 	bl	8003ae0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d122      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d11b      	bne.n	8003ca6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff13 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a92      	ldr	r2, [pc, #584]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cca:	4b92      	ldr	r3, [pc, #584]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ccc:	e001      	b.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a8b      	ldr	r2, [pc, #556]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ce8:	4b8a      	ldr	r3, [pc, #552]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d004      	beq.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 8099 	bne.w	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f925 	bl	8003f6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9c8 	bl	80040cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d13a      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d035      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d5a:	4b6e      	ldr	r3, [pc, #440]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5c:	e001      	b.n	8003d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4969      	ldr	r1, [pc, #420]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6a:	428b      	cmp	r3, r1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d6e:	4b69      	ldr	r3, [pc, #420]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d70:	e001      	b.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fe88 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	f040 80c3 	bne.w	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80bd 	beq.w	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a49      	ldr	r2, [pc, #292]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4944      	ldr	r1, [pc, #272]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e04:	e001      	b.n	8003e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fe4a 	bl	8003acc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e38:	e089      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8be 	bl	8003fd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8fd 	bl	8004068 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d12f      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d02a      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4919      	ldr	r1, [pc, #100]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003eb0:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb2:	e001      	b.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ebc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fdfa 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d136      	bne.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d031      	beq.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4902      	ldr	r1, [pc, #8]	; (8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f06:	428b      	cmp	r3, r1
 8003f08:	d106      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f0a:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f0c:	e006      	b.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f0e:	bf00      	nop
 8003f10:	40003800 	.word	0x40003800
 8003f14:	40003400 	.word	0x40003400
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fdc0 	bl	8003acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	e000      	b.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f4e:	bf00      	nop
}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c99      	adds	r1, r3, #2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d113      	bne.n	8003fc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ffc9 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c99      	adds	r1, r3, #2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fe2:	8819      	ldrh	r1, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <I2SEx_TxISR_I2SExt+0x22>
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 8003ff0:	e001      	b.n	8003ff6 <I2SEx_TxISR_I2SExt+0x26>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d121      	bne.n	8004056 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <I2SEx_TxISR_I2SExt+0x50>
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 800401e:	e001      	b.n	8004024 <I2SEx_TxISR_I2SExt+0x54>
 8004020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	490d      	ldr	r1, [pc, #52]	; (8004060 <I2SEx_TxISR_I2SExt+0x90>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d101      	bne.n	8004034 <I2SEx_TxISR_I2SExt+0x64>
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <I2SEx_TxISR_I2SExt+0x94>)
 8004032:	e001      	b.n	8004038 <I2SEx_TxISR_I2SExt+0x68>
 8004034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800403c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff81 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40003800 	.word	0x40003800
 8004064:	40003400 	.word	0x40003400

08004068 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68d8      	ldr	r0, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	1c99      	adds	r1, r3, #2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004080:	b282      	uxth	r2, r0
 8004082:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d113      	bne.n	80040c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff4a 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <I2SEx_RxISR_I2SExt+0x90>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <I2SEx_RxISR_I2SExt+0x16>
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 80040e0:	e001      	b.n	80040e6 <I2SEx_RxISR_I2SExt+0x1a>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e6:	68d8      	ldr	r0, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	1c99      	adds	r1, r3, #2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040f2:	b282      	uxth	r2, r0
 80040f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d121      	bne.n	8004152 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <I2SEx_RxISR_I2SExt+0x90>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <I2SEx_RxISR_I2SExt+0x50>
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 800411a:	e001      	b.n	8004120 <I2SEx_RxISR_I2SExt+0x54>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	490d      	ldr	r1, [pc, #52]	; (800415c <I2SEx_RxISR_I2SExt+0x90>)
 8004128:	428b      	cmp	r3, r1
 800412a:	d101      	bne.n	8004130 <I2SEx_RxISR_I2SExt+0x64>
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <I2SEx_RxISR_I2SExt+0x94>)
 800412e:	e001      	b.n	8004134 <I2SEx_RxISR_I2SExt+0x68>
 8004130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004134:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004138:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff03 	bl	8003f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40003800 	.word	0x40003800
 8004160:	40003400 	.word	0x40003400

08004164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e267      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d075      	beq.n	800426e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b85      	ldr	r3, [pc, #532]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004196:	2b08      	cmp	r3, #8
 8004198:	d112      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419a:	4b82      	ldr	r3, [pc, #520]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <HAL_RCC_OscConfig+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d157      	bne.n	800426c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e242      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x74>
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a75      	ldr	r2, [pc, #468]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x98>
 80041e2:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6f      	ldr	r2, [pc, #444]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6c      	ldr	r2, [pc, #432]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041fc:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fc fde0 	bl	8000de0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fc fddc 	bl	8000de0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e207      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5b      	ldr	r3, [pc, #364]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xc0>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fc fdcc 	bl	8000de0 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424c:	f7fc fdc8 	bl	8000de0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1f3      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b51      	ldr	r3, [pc, #324]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0xe8>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c7      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4937      	ldr	r1, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fc fd81 	bl	8000de0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fc fd7d 	bl	8000de0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1a8      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4925      	ldr	r1, [pc, #148]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fc fd60 	bl	8000de0 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fc fd5c 	bl	8000de0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e187      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d036      	beq.n	80043bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCC_OscConfig+0x248>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fc fd40 	bl	8000de0 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fc fd3c 	bl	8000de0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e167      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x200>
 8004382:	e01b      	b.n	80043bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_OscConfig+0x248>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fc fd29 	bl	8000de0 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fc fd25 	bl	8000de0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e150      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b88      	ldr	r3, [pc, #544]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8097 	beq.w	80044f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b81      	ldr	r3, [pc, #516]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b7d      	ldr	r3, [pc, #500]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a7c      	ldr	r2, [pc, #496]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b7a      	ldr	r3, [pc, #488]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b77      	ldr	r3, [pc, #476]	; (80045d8 <HAL_RCC_OscConfig+0x474>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004406:	4b74      	ldr	r3, [pc, #464]	; (80045d8 <HAL_RCC_OscConfig+0x474>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x474>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fc fce5 	bl	8000de0 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fc fce1 	bl	8000de0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e10c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <HAL_RCC_OscConfig+0x474>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x2ea>
 8004440:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a63      	ldr	r2, [pc, #396]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x30c>
 8004456:	4b5f      	ldr	r3, [pc, #380]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a5e      	ldr	r2, [pc, #376]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	4b5c      	ldr	r3, [pc, #368]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a5b      	ldr	r2, [pc, #364]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 8004470:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a57      	ldr	r2, [pc, #348]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a54      	ldr	r2, [pc, #336]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fc fca6 	bl	8000de0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fc fca2 	bl	8000de0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0cb      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCC_OscConfig+0x334>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fc fc90 	bl	8000de0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fc fc8c 	bl	8000de0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0b5      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ee      	bne.n	80044c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	4a38      	ldr	r2, [pc, #224]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a1 	beq.w	8004644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d05c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d141      	bne.n	800459a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b31      	ldr	r3, [pc, #196]	; (80045dc <HAL_RCC_OscConfig+0x478>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fc fc60 	bl	8000de0 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004524:	f7fc fc5c 	bl	8000de0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e087      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	491b      	ldr	r1, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x478>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fc fc35 	bl	8000de0 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457a:	f7fc fc31 	bl	8000de0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e05c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458c:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x416>
 8004598:	e054      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fc fc1e 	bl	8000de0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fc fc1a 	bl	8000de0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e045      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x444>
 80045c6:	e03d      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e038      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x4ec>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d028      	beq.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d121      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d11a      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	4293      	cmp	r3, r2
 800461a:	d111      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0cc      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b68      	ldr	r3, [pc, #416]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90c      	bls.n	8004690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b65      	ldr	r3, [pc, #404]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a58      	ldr	r2, [pc, #352]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a52      	ldr	r2, [pc, #328]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d044      	beq.n	8004774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d119      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d003      	beq.n	8004712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	2b03      	cmp	r3, #3
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e067      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b37      	ldr	r3, [pc, #220]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4934      	ldr	r1, [pc, #208]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004744:	f7fc fb4c 	bl	8000de0 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fc fb48 	bl	8000de0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20c      	bcs.n	800479c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc faac 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00
 8004810:	40023800 	.word	0x40023800
 8004814:	08007c40 	.word	0x08007c40
 8004818:	20000000 	.word	0x20000000
 800481c:	20000004 	.word	0x20000004

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b090      	sub	sp, #64	; 0x40
 8004826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	2300      	movs	r3, #0
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCC_GetSysClockFreq+0x16c>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x34>
 800484e:	2b04      	cmp	r3, #4
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x3a>
 8004852:	e09b      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004858:	e09b      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800485e:	e098      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d028      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	627a      	str	r2, [r7, #36]	; 0x24
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004888:	2100      	movs	r1, #0
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800488c:	fb03 f201 	mul.w	r2, r3, r1
 8004890:	2300      	movs	r3, #0
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	4413      	add	r3, r2
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800489a:	fba0 1202 	umull	r1, r2, r0, r2
 800489e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048a0:	460a      	mov	r2, r1
 80048a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80048a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a6:	4413      	add	r3, r2
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	2200      	movs	r2, #0
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	61fa      	str	r2, [r7, #28]
 80048b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048ba:	f7fb fc8d 	bl	80001d8 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4613      	mov	r3, r2
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e053      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c8:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	2200      	movs	r2, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	617a      	str	r2, [r7, #20]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	4652      	mov	r2, sl
 80048e0:	465b      	mov	r3, fp
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	0159      	lsls	r1, r3, #5
 80048ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f0:	0150      	lsls	r0, r2, #5
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	ebb2 080a 	subs.w	r8, r2, sl
 80048fa:	eb63 090b 	sbc.w	r9, r3, fp
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800490a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800490e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004912:	ebb2 0408 	subs.w	r4, r2, r8
 8004916:	eb63 0509 	sbc.w	r5, r3, r9
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	00eb      	lsls	r3, r5, #3
 8004924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004928:	00e2      	lsls	r2, r4, #3
 800492a:	4614      	mov	r4, r2
 800492c:	461d      	mov	r5, r3
 800492e:	eb14 030a 	adds.w	r3, r4, sl
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	eb45 030b 	adc.w	r3, r5, fp
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004946:	4629      	mov	r1, r5
 8004948:	028b      	lsls	r3, r1, #10
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004950:	4621      	mov	r1, r4
 8004952:	028a      	lsls	r2, r1, #10
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2200      	movs	r2, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004964:	f7fb fc38 	bl	80001d8 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004994:	4618      	mov	r0, r3
 8004996:	3740      	adds	r7, #64	; 0x40
 8004998:	46bd      	mov	sp, r7
 800499a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	016e3600 	.word	0x016e3600

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08007c50 	.word	0x08007c50

080049ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d038      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1a:	f7fc f9e1 	bl	8000de0 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a22:	f7fc f9dd 	bl	8000de0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0bd      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a34:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	495a      	ldr	r1, [pc, #360]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fc f9be 	bl	8000de0 <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a68:	f7fc f9ba 	bl	8000de0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e09a      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a7a:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8083 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	4a47      	ldr	r2, [pc, #284]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa4:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004abc:	f7fc f990 	bl	8000de0 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ac4:	f7fc f98c 	bl	8000de0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e06c      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02f      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d028      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b00:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d114      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc f95a 	bl	8000de0 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fc f956 	bl	8000de0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e034      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b46:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0ee      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5e:	d10d      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004b60:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	4911      	ldr	r1, [pc, #68]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
 8004b7a:	e005      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b86:	6093      	str	r3, [r2, #8]
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b94:	4909      	ldr	r1, [pc, #36]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7d1a      	ldrb	r2, [r3, #20]
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004bac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	42470068 	.word	0x42470068
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	42470e40 	.word	0x42470e40
 8004bc8:	424711e0 	.word	0x424711e0

08004bcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d141      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004bea:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c00:	d131      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c04:	617b      	str	r3, [r7, #20]
          break;
 8004c06:	e031      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c14:	d109      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c56:	0f1b      	lsrs	r3, r3, #28
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	617b      	str	r3, [r7, #20]
          break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
          break;
 8004c6a:	bf00      	nop
        }
      }
      break;
 8004c6c:	e000      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004c6e:	bf00      	nop
    }
  }
  return frequency;
 8004c70:	697b      	ldr	r3, [r7, #20]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	00bb8000 	.word	0x00bb8000
 8004c88:	016e3600 	.word	0x016e3600
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07b      	b.n	8004d9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d108      	bne.n	8004cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d009      	beq.n	8004cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	61da      	str	r2, [r3, #28]
 8004cba:	e005      	b.n	8004cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fb ff28 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	ea42 0103 	orr.w	r1, r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0104 	and.w	r1, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0210 	and.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b088      	sub	sp, #32
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_SPI_Transmit+0x22>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e12d      	b.n	8005020 <HAL_SPI_Transmit+0x27e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dcc:	f7fc f808 	bl	8000de0 <HAL_GetTick>
 8004dd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de6:	e116      	b.n	8005016 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_SPI_Transmit+0x52>
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004df8:	e10d      	b.n	8005016 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	d10f      	bne.n	8004e62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d007      	beq.n	8004e80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e88:	d14f      	bne.n	8004f2a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_Transmit+0xf6>
 8004e92:	8afb      	ldrh	r3, [r7, #22]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d142      	bne.n	8004f1e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ebc:	e02f      	b.n	8004f1e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d112      	bne.n	8004ef2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ef0:	e015      	b.n	8004f1e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef2:	f7fb ff75 	bl	8000de0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d803      	bhi.n	8004f0a <HAL_SPI_Transmit+0x168>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d102      	bne.n	8004f10 <HAL_SPI_Transmit+0x16e>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f1c:	e07b      	b.n	8005016 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ca      	bne.n	8004ebe <HAL_SPI_Transmit+0x11c>
 8004f28:	e050      	b.n	8004fcc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_Transmit+0x196>
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d144      	bne.n	8004fc2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f5e:	e030      	b.n	8004fc2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d113      	bne.n	8004f96 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f94:	e015      	b.n	8004fc2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f96:	f7fb ff23 	bl	8000de0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d803      	bhi.n	8004fae <HAL_SPI_Transmit+0x20c>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d102      	bne.n	8004fb4 <HAL_SPI_Transmit+0x212>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004fc0:	e029      	b.n	8005016 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1c9      	bne.n	8004f60 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8b1 	bl	8005138 <SPI_EndRxTxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e003      	b.n	8005016 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005038:	f7fb fed2 	bl	8000de0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005048:	f7fb feca 	bl	8000de0 <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	e054      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d050      	beq.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005068:	f7fb feba 	bl	8000de0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d13d      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800508c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005096:	d111      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	d004      	beq.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d107      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d10f      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e017      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3b01      	subs	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d19b      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000

08005138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2201      	movs	r2, #1
 800514c:	2102      	movs	r1, #2
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff6a 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e032      	b.n	80051d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <SPI_EndRxTxTransaction+0xa0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <SPI_EndRxTxTransaction+0xa4>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0d5b      	lsrs	r3, r3, #21
 8005176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005188:	d112      	bne.n	80051b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	; 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff ff47 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d016      	beq.n	80051ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e00f      	b.n	80051d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d0f2      	beq.n	80051b0 <SPI_EndRxTxTransaction+0x78>
 80051ca:	e000      	b.n	80051ce <SPI_EndRxTxTransaction+0x96>
        break;
 80051cc:	bf00      	nop
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000000 	.word	0x20000000
 80051dc:	165e9f81 	.word	0x165e9f81

080051e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	f107 001c 	add.w	r0, r7, #28
 80051ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d123      	bne.n	8005242 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005222:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9dc 	bl	80055f4 <USB_CoreReset>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	e01b      	b.n	800527a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f9d0 	bl	80055f4 <USB_CoreReset>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005258:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
 800526c:	e005      	b.n	800527a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800527a:	7fbb      	ldrb	r3, [r7, #30]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10b      	bne.n	8005298 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f043 0206 	orr.w	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr

080052a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0201 	bic.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d115      	bne.n	800533a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800531a:	200a      	movs	r0, #10
 800531c:	f7fb fd6c 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	330a      	adds	r3, #10
 8005324:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f956 	bl	80055d8 <USB_GetMode>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d01e      	beq.n	8005370 <USB_SetCurrentMode+0x84>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2bc7      	cmp	r3, #199	; 0xc7
 8005336:	d9f0      	bls.n	800531a <USB_SetCurrentMode+0x2e>
 8005338:	e01a      	b.n	8005370 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d115      	bne.n	800536c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800534c:	200a      	movs	r0, #10
 800534e:	f7fb fd53 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	330a      	adds	r3, #10
 8005356:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f93d 	bl	80055d8 <USB_GetMode>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <USB_SetCurrentMode+0x84>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2bc7      	cmp	r3, #199	; 0xc7
 8005368:	d9f0      	bls.n	800534c <USB_SetCurrentMode+0x60>
 800536a:	e001      	b.n	8005370 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e005      	b.n	800537c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2bc8      	cmp	r3, #200	; 0xc8
 8005374:	d101      	bne.n	800537a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800539e:	d901      	bls.n	80053a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e01b      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	daf2      	bge.n	8005392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	019b      	lsls	r3, r3, #6
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053c8:	d901      	bls.n	80053ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e006      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d0f0      	beq.n	80053bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005400:	d901      	bls.n	8005406 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e018      	b.n	8005438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	daf2      	bge.n	80053f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2210      	movs	r2, #16
 8005416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005424:	d901      	bls.n	800542a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b10      	cmp	r3, #16
 8005434:	d0f0      	beq.n	8005418 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	460b      	mov	r3, r1
 8005454:	71fb      	strb	r3, [r7, #7]
 8005456:	4613      	mov	r3, r2
 8005458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d123      	bne.n	80054b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800546a:	88bb      	ldrh	r3, [r7, #4]
 800546c:	3303      	adds	r3, #3
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e018      	b.n	80054aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	031a      	lsls	r2, r3, #12
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	461a      	mov	r2, r3
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3301      	adds	r3, #1
 8005496:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3301      	adds	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3301      	adds	r3, #1
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3e2      	bcc.n	8005478 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3724      	adds	r7, #36	; 0x24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b08b      	sub	sp, #44	; 0x2c
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e014      	b.n	8005516 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3301      	adds	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	3301      	adds	r3, #1
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	3301      	adds	r3, #1
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	3301      	adds	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	3301      	adds	r3, #1
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	6a3a      	ldr	r2, [r7, #32]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3e6      	bcc.n	80054ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800551e:	8bfb      	ldrh	r3, [r7, #30]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01e      	beq.n	8005562 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552e:	461a      	mov	r2, r3
 8005530:	f107 0310 	add.w	r3, r7, #16
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	b2da      	uxtb	r2, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	701a      	strb	r2, [r3, #0]
      i++;
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	3301      	adds	r3, #1
 800554e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	3301      	adds	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005556:	8bfb      	ldrh	r3, [r7, #30]
 8005558:	3b01      	subs	r3, #1
 800555a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800555c:	8bfb      	ldrh	r3, [r7, #30]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ea      	bne.n	8005538 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005564:	4618      	mov	r0, r3
 8005566:	372c      	adds	r7, #44	; 0x2c
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005588:	68fb      	ldr	r3, [r7, #12]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ca:	68bb      	ldr	r3, [r7, #8]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800560c:	d901      	bls.n	8005612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e01b      	b.n	800564a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	daf2      	bge.n	8005600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f043 0201 	orr.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005636:	d901      	bls.n	800563c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e006      	b.n	800564a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d0f0      	beq.n	800562a <USB_CoreReset+0x36>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005658:	b084      	sub	sp, #16
 800565a:	b580      	push	{r7, lr}
 800565c:	b086      	sub	sp, #24
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d119      	bne.n	80056e2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10a      	bne.n	80056cc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e014      	b.n	80056f6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e009      	b.n	80056f6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056f6:	2110      	movs	r1, #16
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fe43 	bl	8005384 <USB_FlushTxFifo>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fe6d 	bl	80053e8 <USB_FlushRxFifo>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e015      	b.n	800574a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	461a      	mov	r2, r3
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	3301      	adds	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800574e:	461a      	mov	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4293      	cmp	r3, r2
 8005754:	d3e3      	bcc.n	800571e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <USB_HostInit+0x150>)
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0e      	ldr	r2, [pc, #56]	; (80057ac <USB_HostInit+0x154>)
 8005774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f043 0210 	orr.w	r2, r3, #16
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <USB_HostInit+0x158>)
 8005792:	4313      	orrs	r3, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a4:	b004      	add	sp, #16
 80057a6:	4770      	bx	lr
 80057a8:	00600080 	.word	0x00600080
 80057ac:	004000e0 	.word	0x004000e0
 80057b0:	a3200008 	.word	0xa3200008

080057b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057fc:	461a      	mov	r2, r3
 80057fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005802:	6053      	str	r3, [r2, #4]
 8005804:	e00c      	b.n	8005820 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	461a      	mov	r2, r3
 8005814:	f241 7370 	movw	r3, #6000	; 0x1770
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	e001      	b.n	8005820 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005852:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <USB_DriveVbus+0x44>
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d106      	bne.n	8005872 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800586c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005870:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d109      	bne.n	8005892 <USB_DriveVbus+0x64>
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c5b      	lsrs	r3, r3, #17
 80058be:	f003 0303 	and.w	r3, r3, #3
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	b29b      	uxth	r3, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	70fb      	strb	r3, [r7, #3]
 8005902:	460b      	mov	r3, r1
 8005904:	70bb      	strb	r3, [r7, #2]
 8005906:	4613      	mov	r3, r2
 8005908:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005926:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800592a:	2b03      	cmp	r3, #3
 800592c:	d867      	bhi.n	80059fe <USB_HC_Init+0x10e>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <USB_HC_Init+0x44>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005945 	.word	0x08005945
 8005938:	080059c1 	.word	0x080059c1
 800593c:	08005945 	.word	0x08005945
 8005940:	08005983 	.word	0x08005983
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	461a      	mov	r2, r3
 8005952:	f240 439d 	movw	r3, #1181	; 0x49d
 8005956:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005958:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800595c:	2b00      	cmp	r3, #0
 800595e:	da51      	bge.n	8005a04 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	440a      	add	r2, r1
 8005976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005980:	e040      	b.n	8005a04 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	461a      	mov	r2, r3
 8005990:	f240 639d 	movw	r3, #1693	; 0x69d
 8005994:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005996:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da34      	bge.n	8005a08 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	60d3      	str	r3, [r2, #12]
      }

      break;
 80059be:	e023      	b.n	8005a08 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	f240 2325 	movw	r3, #549	; 0x225
 80059d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da17      	bge.n	8005a0c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059fa:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059fc:	e006      	b.n	8005a0c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	77fb      	strb	r3, [r7, #31]
      break;
 8005a02:	e004      	b.n	8005a0e <USB_HC_Init+0x11e>
      break;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <USB_HC_Init+0x11e>
      break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <USB_HC_Init+0x11e>
      break;
 8005a0c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	6939      	ldr	r1, [r7, #16]
 8005a56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da03      	bge.n	8005a7a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	e001      	b.n	8005a7e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff0e 	bl	80058a0 <USB_GetHostSpeed>
 8005a84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d106      	bne.n	8005a9c <USB_HC_Init+0x1ac>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d003      	beq.n	8005a9c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e001      	b.n	8005aa0 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005aa0:	787b      	ldrb	r3, [r7, #1]
 8005aa2:	059b      	lsls	r3, r3, #22
 8005aa4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005aa8:	78bb      	ldrb	r3, [r7, #2]
 8005aaa:	02db      	lsls	r3, r3, #11
 8005aac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ab0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ab6:	049b      	lsls	r3, r3, #18
 8005ab8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005abc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005abe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ac4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ade:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d003      	beq.n	8005af0 <USB_HC_Init+0x200>
 8005ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10f      	bne.n	8005b10 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b0e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop

08005b1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	; 0x30
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b38:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	799b      	ldrb	r3, [r3, #6]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d158      	bne.n	8005bf4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005b42:	2301      	movs	r3, #1
 8005b44:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	78db      	ldrb	r3, [r3, #3]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	8a92      	ldrh	r2, [r2, #20]
 8005b54:	fb03 f202 	mul.w	r2, r3, r2
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61da      	str	r2, [r3, #28]
 8005b5c:	e079      	b.n	8005c52 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	7c9b      	ldrb	r3, [r3, #18]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d130      	bne.n	8005bc8 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	2bbc      	cmp	r3, #188	; 0xbc
 8005b6c:	d918      	bls.n	8005ba0 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	8a9b      	ldrh	r3, [r3, #20]
 8005b72:	461a      	mov	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <USB_HC_StartXfer+0x74>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d103      	bne.n	8005b98 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2202      	movs	r2, #2
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	e05c      	b.n	8005c52 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e058      	b.n	8005c52 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d007      	beq.n	8005bc0 <USB_HC_StartXfer+0xa4>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d003      	beq.n	8005bc0 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e048      	b.n	8005c52 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e044      	b.n	8005c52 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10d      	bne.n	8005bea <USB_HC_StartXfer+0xce>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	8a92      	ldrh	r2, [r2, #20]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d907      	bls.n	8005bea <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	8a92      	ldrh	r2, [r2, #20]
 8005be0:	fb03 f202 	mul.w	r2, r3, r2
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61da      	str	r2, [r3, #28]
 8005be8:	e033      	b.n	8005c52 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6a1a      	ldr	r2, [r3, #32]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	61da      	str	r2, [r3, #28]
 8005bf2:	e02e      	b.n	8005c52 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	8a92      	ldrh	r2, [r2, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	3b01      	subs	r3, #1
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	8a92      	ldrh	r2, [r2, #20]
 8005c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c10:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8005c12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c14:	8b7b      	ldrh	r3, [r7, #26]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d90b      	bls.n	8005c32 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005c1a:	8b7b      	ldrh	r3, [r7, #26]
 8005c1c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	8a92      	ldrh	r2, [r2, #20]
 8005c24:	fb03 f202 	mul.w	r2, r3, r2
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	61da      	str	r2, [r3, #28]
 8005c2c:	e001      	b.n	8005c32 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	78db      	ldrb	r3, [r3, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	8a92      	ldrh	r2, [r2, #20]
 8005c40:	fb03 f202 	mul.w	r2, r3, r2
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	61da      	str	r2, [r3, #28]
 8005c48:	e003      	b.n	8005c52 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c5c:	04d9      	lsls	r1, r3, #19
 8005c5e:	4ba4      	ldr	r3, [pc, #656]	; (8005ef0 <USB_HC_StartXfer+0x3d4>)
 8005c60:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c62:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	7d9b      	ldrb	r3, [r3, #22]
 8005c68:	075b      	lsls	r3, r3, #29
 8005c6a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	0148      	lsls	r0, r1, #5
 8005c72:	6a39      	ldr	r1, [r7, #32]
 8005c74:	4401      	add	r1, r0
 8005c76:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c7a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c7c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6999      	ldr	r1, [r3, #24]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	460a      	mov	r2, r1
 8005c96:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	7e7b      	ldrb	r3, [r7, #25]
 8005ce0:	075b      	lsls	r3, r3, #29
 8005ce2:	69f9      	ldr	r1, [r7, #28]
 8005ce4:	0148      	lsls	r0, r1, #5
 8005ce6:	6a39      	ldr	r1, [r7, #32]
 8005ce8:	4401      	add	r1, r0
 8005cea:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	799b      	ldrb	r3, [r3, #6]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	f040 80c4 	bne.w	8005e84 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	7c5b      	ldrb	r3, [r3, #17]
 8005d00:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005d06:	4313      	orrs	r3, r2
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005d18:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	79db      	ldrb	r3, [r3, #7]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d123      	bne.n	8005d8a <USB_HC_StartXfer+0x26e>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11f      	bne.n	8005d8a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d88:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	7c9b      	ldrb	r3, [r3, #18]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d003      	beq.n	8005d9a <USB_HC_StartXfer+0x27e>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	7c9b      	ldrb	r3, [r3, #18]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d117      	bne.n	8005dca <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d113      	bne.n	8005dca <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10f      	bne.n	8005dca <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc8:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	7c9b      	ldrb	r3, [r3, #18]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d163      	bne.n	8005e9a <USB_HC_StartXfer+0x37e>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d15f      	bne.n	8005e9a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d859      	bhi.n	8005e98 <USB_HC_StartXfer+0x37c>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USB_HC_StartXfer+0x2d0>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e1f 	.word	0x08005e1f
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e63 	.word	0x08005e63
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	6053      	str	r3, [r2, #4]
          break;
 8005e1c:	e03d      	b.n	8005e9a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e38:	f043 030e 	orr.w	r3, r3, #14
 8005e3c:	6053      	str	r3, [r2, #4]
          break;
 8005e3e:	e02c      	b.n	8005e9a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	6a3a      	ldr	r2, [r7, #32]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e5e:	6053      	str	r3, [r2, #4]
          break;
 8005e60:	e01b      	b.n	8005e9a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e80:	6053      	str	r3, [r2, #4]
          break;
 8005e82:	e00a      	b.n	8005e9a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6053      	str	r3, [r2, #4]
 8005e96:	e000      	b.n	8005e9a <USB_HC_StartXfer+0x37e>
          break;
 8005e98:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	e003      	b.n	8005ecc <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e055      	b.n	8005f9c <USB_HC_StartXfer+0x480>
 8005ef0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	78db      	ldrb	r3, [r3, #3]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d14e      	bne.n	8005f9a <USB_HC_StartXfer+0x47e>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d04a      	beq.n	8005f9a <USB_HC_StartXfer+0x47e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	79db      	ldrb	r3, [r3, #7]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d146      	bne.n	8005f9a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	7c9b      	ldrb	r3, [r3, #18]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d831      	bhi.n	8005f78 <USB_HC_StartXfer+0x45c>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <USB_HC_StartXfer+0x400>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f2d 	.word	0x08005f2d
 8005f28:	08005f51 	.word	0x08005f51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	3303      	adds	r3, #3
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f36:	8afa      	ldrh	r2, [r7, #22]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d91c      	bls.n	8005f7c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f4e:	e015      	b.n	8005f7c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	3303      	adds	r3, #3
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f5a:	8afa      	ldrh	r2, [r7, #22]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d90a      	bls.n	8005f80 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f76:	e003      	b.n	8005f80 <USB_HC_StartXfer+0x464>

      default:
        break;
 8005f78:	bf00      	nop
 8005f7a:	e002      	b.n	8005f82 <USB_HC_StartXfer+0x466>
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <USB_HC_StartXfer+0x466>
        break;
 8005f80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	785a      	ldrb	r2, [r3, #1]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2000      	movs	r0, #0
 8005f92:	9000      	str	r0, [sp, #0]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff fa55 	bl	8005444 <USB_WritePacket>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	b29b      	uxth	r3, r3
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b089      	sub	sp, #36	; 0x24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0c9b      	lsrs	r3, r3, #18
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	0fdb      	lsrs	r3, r3, #31
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	0fdb      	lsrs	r3, r3, #31
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b20      	cmp	r3, #32
 800602a:	d10d      	bne.n	8006048 <USB_HC_Halt+0x82>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <USB_HC_Halt+0x82>
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d002      	beq.n	8006044 <USB_HC_Halt+0x7e>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d101      	bne.n	8006048 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e0d8      	b.n	80061fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <USB_HC_Halt+0x8e>
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d173      	bne.n	800613c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006072:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d14a      	bne.n	8006116 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d133      	bne.n	80060f4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060aa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d8:	d82e      	bhi.n	8006138 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f0:	d0ec      	beq.n	80060cc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060f2:	e081      	b.n	80061f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800610e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006112:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006114:	e070      	b.n	80061f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006134:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006136:	e05f      	b.n	80061f8 <USB_HC_Halt+0x232>
            break;
 8006138:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800613a:	e05d      	b.n	80061f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d133      	bne.n	80061d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800618a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b8:	d81d      	bhi.n	80061f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d0:	d0ec      	beq.n	80061ac <USB_HC_Halt+0x1e6>
 80061d2:	e011      	b.n	80061f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e000      	b.n	80061f8 <USB_HC_Halt+0x232>
          break;
 80061f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3724      	adds	r7, #36	; 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f855 	bl	80052ca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006220:	2110      	movs	r1, #16
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff f8ae 	bl	8005384 <USB_FlushTxFifo>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff f8d8 	bl	80053e8 <USB_FlushRxFifo>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	e01f      	b.n	8006288 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800625e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006266:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800626e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	461a      	mov	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3301      	adds	r3, #1
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d9dc      	bls.n	8006248 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e034      	b.n	80062fe <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062aa:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ba:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	461a      	mov	r2, r3
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062da:	d80c      	bhi.n	80062f6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f2:	d0ec      	beq.n	80062ce <USB_StopHost+0xc8>
 80062f4:	e000      	b.n	80062f8 <USB_StopHost+0xf2>
        break;
 80062f6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b0f      	cmp	r3, #15
 8006302:	d9c7      	bls.n	8006294 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630a:	461a      	mov	r2, r3
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fe ffc4 	bl	80052a8 <USB_EnableGlobalInt>

  return ret;
 8006320:	7ffb      	ldrb	r3, [r7, #31]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800632a:	b590      	push	{r4, r7, lr}
 800632c:	b089      	sub	sp, #36	; 0x24
 800632e:	af04      	add	r7, sp, #16
 8006330:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006332:	2301      	movs	r3, #1
 8006334:	2202      	movs	r2, #2
 8006336:	2102      	movs	r1, #2
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc86 	bl	8006c4a <USBH_FindInterface>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2bff      	cmp	r3, #255	; 0xff
 8006346:	d002      	beq.n	800634e <USBH_CDC_InterfaceInit+0x24>
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d901      	bls.n	8006352 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800634e:	2302      	movs	r3, #2
 8006350:	e13d      	b.n	80065ce <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fc5b 	bl	8006c12 <USBH_SelectInterface>
 800635c:	4603      	mov	r3, r0
 800635e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006366:	2302      	movs	r3, #2
 8006368:	e131      	b.n	80065ce <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006370:	2050      	movs	r0, #80	; 0x50
 8006372:	f001 fb0b 	bl	800798c <malloc>
 8006376:	4603      	mov	r3, r0
 8006378:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800638a:	2302      	movs	r3, #2
 800638c:	e11f      	b.n	80065ce <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800638e:	2250      	movs	r2, #80	; 0x50
 8006390:	2100      	movs	r1, #0
 8006392:	68b8      	ldr	r0, [r7, #8]
 8006394:	f001 fbb6 	bl	8007b04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	211a      	movs	r1, #26
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da15      	bge.n	80063dc <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063d6:	881a      	ldrh	r2, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 ffbb 	bl	800735e <USBH_AllocPipe>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	7819      	ldrb	r1, [r3, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	7858      	ldrb	r0, [r3, #1]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	8952      	ldrh	r2, [r2, #10]
 8006408:	9202      	str	r2, [sp, #8]
 800640a:	2203      	movs	r2, #3
 800640c:	9201      	str	r2, [sp, #4]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4623      	mov	r3, r4
 8006412:	4602      	mov	r2, r0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 ff73 	bl	8007300 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2200      	movs	r2, #0
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fa36 	bl	8007894 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	210a      	movs	r1, #10
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fc0b 	bl	8006c4a <USBH_FindInterface>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d002      	beq.n	8006444 <USBH_CDC_InterfaceInit+0x11a>
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d901      	bls.n	8006448 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006444:	2302      	movs	r3, #2
 8006446:	e0c2      	b.n	80065ce <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	211a      	movs	r1, #26
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	4413      	add	r3, r2
 8006454:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b25b      	sxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	da16      	bge.n	800648e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	211a      	movs	r1, #26
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	4413      	add	r3, r2
 800646c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	211a      	movs	r1, #26
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006486:	881a      	ldrh	r2, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	835a      	strh	r2, [r3, #26]
 800648c:	e015      	b.n	80064ba <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	211a      	movs	r1, #26
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	211a      	movs	r1, #26
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	211a      	movs	r1, #26
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da16      	bge.n	8006500 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	211a      	movs	r1, #26
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	211a      	movs	r1, #26
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064f8:	881a      	ldrh	r2, [r3, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	835a      	strh	r2, [r3, #26]
 80064fe:	e015      	b.n	800652c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	211a      	movs	r1, #26
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	7b9b      	ldrb	r3, [r3, #14]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 ff13 	bl	800735e <USBH_AllocPipe>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	7bdb      	ldrb	r3, [r3, #15]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 ff09 	bl	800735e <USBH_AllocPipe>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	7b59      	ldrb	r1, [r3, #13]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	7b98      	ldrb	r0, [r3, #14]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	8b12      	ldrh	r2, [r2, #24]
 800656c:	9202      	str	r2, [sp, #8]
 800656e:	2202      	movs	r2, #2
 8006570:	9201      	str	r2, [sp, #4]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	4623      	mov	r3, r4
 8006576:	4602      	mov	r2, r0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fec1 	bl	8007300 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	7b19      	ldrb	r1, [r3, #12]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	7bd8      	ldrb	r0, [r3, #15]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	8b52      	ldrh	r2, [r2, #26]
 8006596:	9202      	str	r2, [sp, #8]
 8006598:	2202      	movs	r2, #2
 800659a:	9201      	str	r2, [sp, #4]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4623      	mov	r3, r4
 80065a0:	4602      	mov	r2, r0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 feac 	bl	8007300 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7b5b      	ldrb	r3, [r3, #13]
 80065b4:	2200      	movs	r2, #0
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f96b 	bl	8007894 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7b1b      	ldrb	r3, [r3, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f964 	bl	8007894 <USBH_LL_SetToggle>

  return USBH_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd90      	pop	{r4, r7, pc}

080065d6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fea1 	bl	800733e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fecc 	bl	80073a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	7b1b      	ldrb	r3, [r3, #12]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fe8e 	bl	800733e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7b1b      	ldrb	r3, [r3, #12]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 feb9 	bl	80073a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b5b      	ldrb	r3, [r3, #13]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	7b5b      	ldrb	r3, [r3, #13]
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fe7b 	bl	800733e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	7b5b      	ldrb	r3, [r3, #13]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fea6 	bl	80073a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f994 	bl	800799c <free>
    phost->pActiveClass->pData = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667a:	2200      	movs	r2, #0
 800667c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3340      	adds	r3, #64	; 0x40
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8b2 	bl	800680a <GetLineCoding>
 80066a6:	4603      	mov	r3, r0
 80066a8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066b6:	2102      	movs	r1, #2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d877      	bhi.n	80067dc <USBH_CDC_Process+0x114>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <USBH_CDC_Process+0x2c>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006709 	.word	0x08006709
 80066f8:	0800670f 	.word	0x0800670f
 80066fc:	0800673f 	.word	0x0800673f
 8006700:	080067b3 	.word	0x080067b3
 8006704:	080067c1 	.word	0x080067c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	e06d      	b.n	80067ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f897 	bl	8006848 <SetLineCoding>
 800671a:	4603      	mov	r3, r0
 800671c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800672c:	e058      	b.n	80067e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d055      	beq.n	80067e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2204      	movs	r2, #4
 8006738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800673c:	e050      	b.n	80067e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3340      	adds	r3, #64	; 0x40
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f860 	bl	800680a <GetLineCoding>
 800674a:	4603      	mov	r3, r0
 800674c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d126      	bne.n	80067a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	791b      	ldrb	r3, [r3, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d13b      	bne.n	80067e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006778:	429a      	cmp	r2, r3
 800677a:	d133      	bne.n	80067e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006788:	429a      	cmp	r2, r3
 800678a:	d12b      	bne.n	80067e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006794:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006796:	429a      	cmp	r2, r3
 8006798:	d124      	bne.n	80067e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f958 	bl	8006a50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067a0:	e020      	b.n	80067e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d01d      	beq.n	80067e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2204      	movs	r2, #4
 80067ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067b0:	e018      	b.n	80067e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f867 	bl	8006886 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f8da 	bl	8006972 <CDC_ProcessReception>
      break;
 80067be:	e014      	b.n	80067ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fb27 	bl	8006e16 <USBH_ClrFeature>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067da:	e005      	b.n	80067e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067dc:	bf00      	nop
 80067de:	e004      	b.n	80067ea <USBH_CDC_Process+0x122>
      break;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <USBH_CDC_Process+0x122>
      break;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <USBH_CDC_Process+0x122>
      break;
 80067e8:	bf00      	nop

  }

  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22a1      	movs	r2, #161	; 0xa1
 8006818:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2221      	movs	r2, #33	; 0x21
 800681e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2207      	movs	r2, #7
 8006830:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2207      	movs	r2, #7
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb10 	bl	8006e5e <USBH_CtlReq>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2221      	movs	r2, #33	; 0x21
 8006856:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2207      	movs	r2, #7
 800686e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2207      	movs	r2, #7
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 faf1 	bl	8006e5e <USBH_CtlReq>
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af02      	add	r7, sp, #8
 800688c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006898:	2300      	movs	r3, #0
 800689a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d002      	beq.n	80068ac <CDC_ProcessTransmission+0x26>
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d023      	beq.n	80068f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068aa:	e05e      	b.n	800696a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	8b12      	ldrh	r2, [r2, #24]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d90b      	bls.n	80068d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	69d9      	ldr	r1, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8b1a      	ldrh	r2, [r3, #24]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	7b5b      	ldrb	r3, [r3, #13]
 80068c4:	2001      	movs	r0, #1
 80068c6:	9000      	str	r0, [sp, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fcd6 	bl	800727a <USBH_BulkSendData>
 80068ce:	e00b      	b.n	80068e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	2001      	movs	r0, #1
 80068e0:	9000      	str	r0, [sp, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fcc9 	bl	800727a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068f0:	e03b      	b.n	800696a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	7b5b      	ldrb	r3, [r3, #13]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 ffa1 	bl	8007840 <USBH_LL_GetURBState>
 80068fe:	4603      	mov	r3, r0
 8006900:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d128      	bne.n	800695a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	8b12      	ldrh	r2, [r2, #24]
 8006910:	4293      	cmp	r3, r2
 8006912:	d90e      	bls.n	8006932 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	8b12      	ldrh	r2, [r2, #24]
 800691c:	1a9a      	subs	r2, r3, r2
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	8b12      	ldrh	r2, [r2, #24]
 800692a:	441a      	add	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	61da      	str	r2, [r3, #28]
 8006930:	e002      	b.n	8006938 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006948:	e00e      	b.n	8006968 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f868 	bl	8006a28 <USBH_CDC_TransmitCallback>
      break;
 8006958:	e006      	b.n	8006968 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d103      	bne.n	8006968 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006968:	bf00      	nop
  }
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006984:	2300      	movs	r3, #0
 8006986:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800698e:	2b03      	cmp	r3, #3
 8006990:	d002      	beq.n	8006998 <CDC_ProcessReception+0x26>
 8006992:	2b04      	cmp	r3, #4
 8006994:	d00e      	beq.n	80069b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006996:	e043      	b.n	8006a20 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	6a19      	ldr	r1, [r3, #32]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	8b5a      	ldrh	r2, [r3, #26]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	7b1b      	ldrb	r3, [r3, #12]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc8d 	bl	80072c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069b2:	e035      	b.n	8006a20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	7b1b      	ldrb	r3, [r3, #12]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 ff40 	bl	8007840 <USBH_LL_GetURBState>
 80069c0:	4603      	mov	r3, r0
 80069c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d129      	bne.n	8006a1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	7b1b      	ldrb	r3, [r3, #12]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fea3 	bl	800771c <USBH_LL_GetLastXferSize>
 80069d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d016      	beq.n	8006a10 <CDC_ProcessReception+0x9e>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	8b5b      	ldrh	r3, [r3, #26]
 80069e6:	461a      	mov	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d910      	bls.n	8006a10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	441a      	add	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2203      	movs	r2, #3
 8006a0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a0e:	e006      	b.n	8006a1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f80f 	bl	8006a3c <USBH_CDC_ReceiveCallback>
      break;
 8006a1e:	bf00      	nop
  }
}
 8006a20:	bf00      	nop
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e029      	b.n	8006ad0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	79fa      	ldrb	r2, [r7, #7]
 8006a80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f81f 	bl	8006ad8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fdb5 	bl	8007638 <USBH_LL_Init>

  return USBH_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e009      	b.n	8006afe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	33e0      	adds	r3, #224	; 0xe0
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b0f      	cmp	r3, #15
 8006b02:	d9f2      	bls.n	8006aea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e009      	b.n	8006b1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b24:	d3f1      	bcc.n	8006b0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2240      	movs	r2, #64	; 0x40
 8006b4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	331c      	adds	r3, #28
 8006b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 ffc1 	bl	8007b04 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 ffb8 	bl	8007b04 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006b9a:	2212      	movs	r2, #18
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 ffb0 	bl	8007b04 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006baa:	223e      	movs	r2, #62	; 0x3e
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ffa8 	bl	8007b04 <memset>

  return USBH_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10e      	bne.n	8006bfa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	33de      	adds	r3, #222	; 0xde
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e004      	b.n	8006c04 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	e001      	b.n	8006c04 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d204      	bcs.n	8006c38 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c36:	e001      	b.n	8006c3c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	4608      	mov	r0, r1
 8006c54:	4611      	mov	r1, r2
 8006c56:	461a      	mov	r2, r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	70fb      	strb	r3, [r7, #3]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70bb      	strb	r3, [r7, #2]
 8006c60:	4613      	mov	r3, r2
 8006c62:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c72:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c74:	e025      	b.n	8006cc2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	221a      	movs	r2, #26
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	3308      	adds	r3, #8
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	3302      	adds	r3, #2
 8006c86:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	795b      	ldrb	r3, [r3, #5]
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d002      	beq.n	8006c98 <USBH_FindInterface+0x4e>
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2bff      	cmp	r3, #255	; 0xff
 8006c96:	d111      	bne.n	8006cbc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c9c:	78ba      	ldrb	r2, [r7, #2]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d002      	beq.n	8006ca8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ca2:	78bb      	ldrb	r3, [r7, #2]
 8006ca4:	2bff      	cmp	r3, #255	; 0xff
 8006ca6:	d109      	bne.n	8006cbc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cac:	787a      	ldrb	r2, [r7, #1]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d002      	beq.n	8006cb8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cb2:	787b      	ldrb	r3, [r7, #1]
 8006cb4:	2bff      	cmp	r3, #255	; 0xff
 8006cb6:	d101      	bne.n	8006cbc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	e006      	b.n	8006cca <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d9d6      	bls.n	8006c76 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006cc8:	23ff      	movs	r3, #255	; 0xff
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fce6 	bl	80076b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fdbd 	bl	8007866 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f804 	bl	8006d38 <USBH_HandleSof>
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b0b      	cmp	r3, #11
 8006d48:	d10a      	bne.n	8006d60 <USBH_HandleSof+0x28>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006d78:	bf00      	nop
}
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006d94:	bf00      	nop
}
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc79 	bl	80076e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fad0 	bl	80073a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	795b      	ldrb	r3, [r3, #5]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 faca 	bl	80073a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d10f      	bne.n	8006e4a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f805 	bl	8006e5e <USBH_CtlReq>
 8006e54:	4603      	mov	r3, r0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	789b      	ldrb	r3, [r3, #2]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d002      	beq.n	8006e7e <USBH_CtlReq+0x20>
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d00f      	beq.n	8006e9c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e7c:	e027      	b.n	8006ece <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2202      	movs	r2, #2
 8006e94:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006e96:	2301      	movs	r3, #1
 8006e98:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9a:	e018      	b.n	8006ece <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f81b 	bl	8006ed8 <USBH_HandleControl>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <USBH_CtlReq+0x54>
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d106      	bne.n	8006ec0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	761a      	strb	r2, [r3, #24]
      break;
 8006ebe:	e005      	b.n	8006ecc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d102      	bne.n	8006ecc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	709a      	strb	r2, [r3, #2]
      break;
 8006ecc:	bf00      	nop
  }
  return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7e1b      	ldrb	r3, [r3, #24]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	2b0a      	cmp	r3, #10
 8006ef0:	f200 8156 	bhi.w	80071a0 <USBH_HandleControl+0x2c8>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBH_HandleControl+0x24>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f43 	.word	0x08006f43
 8006f04:	08006fad 	.word	0x08006fad
 8006f08:	08006fd3 	.word	0x08006fd3
 8006f0c:	0800700b 	.word	0x0800700b
 8006f10:	08007035 	.word	0x08007035
 8006f14:	08007087 	.word	0x08007087
 8006f18:	080070a9 	.word	0x080070a9
 8006f1c:	080070e5 	.word	0x080070e5
 8006f20:	0800710b 	.word	0x0800710b
 8006f24:	08007149 	.word	0x08007149
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f103 0110 	add.w	r1, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	795b      	ldrb	r3, [r3, #5]
 8006f32:	461a      	mov	r2, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f943 	bl	80071c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	761a      	strb	r2, [r3, #24]
      break;
 8006f40:	e139      	b.n	80071b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	795b      	ldrb	r3, [r3, #5]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc79 	bl	8007840 <USBH_LL_GetURBState>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11e      	bne.n	8006f96 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7c1b      	ldrb	r3, [r3, #16]
 8006f5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f60:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8adb      	ldrh	r3, [r3, #22]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f6a:	7b7b      	ldrb	r3, [r7, #13]
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d103      	bne.n	8006f78 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2203      	movs	r2, #3
 8006f74:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f76:	e115      	b.n	80071a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2205      	movs	r2, #5
 8006f7c:	761a      	strb	r2, [r3, #24]
      break;
 8006f7e:	e111      	b.n	80071a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f80:	7b7b      	ldrb	r3, [r7, #13]
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	d103      	bne.n	8006f8e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2209      	movs	r2, #9
 8006f8a:	761a      	strb	r2, [r3, #24]
      break;
 8006f8c:	e10a      	b.n	80071a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2207      	movs	r2, #7
 8006f92:	761a      	strb	r2, [r3, #24]
      break;
 8006f94:	e106      	b.n	80071a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d003      	beq.n	8006fa4 <USBH_HandleControl+0xcc>
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	f040 8100 	bne.w	80071a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	220b      	movs	r2, #11
 8006fa8:	761a      	strb	r2, [r3, #24]
      break;
 8006faa:	e0fb      	b.n	80071a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6899      	ldr	r1, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	899a      	ldrh	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	791b      	ldrb	r3, [r3, #4]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f93a 	bl	800723e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	761a      	strb	r2, [r3, #24]
      break;
 8006fd0:	e0f1      	b.n	80071b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc31 	bl	8007840 <USBH_LL_GetURBState>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2209      	movs	r2, #9
 8006fec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d102      	bne.n	8006ffa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ff8:	e0d6      	b.n	80071a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	f040 80d3 	bne.w	80071a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	220b      	movs	r2, #11
 8007006:	761a      	strb	r2, [r3, #24]
      break;
 8007008:	e0ce      	b.n	80071a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	899a      	ldrh	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	795b      	ldrb	r3, [r3, #5]
 8007016:	2001      	movs	r0, #1
 8007018:	9000      	str	r0, [sp, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f8ea 	bl	80071f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2206      	movs	r2, #6
 8007030:	761a      	strb	r2, [r3, #24]
      break;
 8007032:	e0c0      	b.n	80071b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	795b      	ldrb	r3, [r3, #5]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc00 	bl	8007840 <USBH_LL_GetURBState>
 8007040:	4603      	mov	r3, r0
 8007042:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d103      	bne.n	8007052 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2207      	movs	r2, #7
 800704e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007050:	e0ac      	b.n	80071ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d105      	bne.n	8007064 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	220c      	movs	r2, #12
 800705c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
      break;
 8007062:	e0a3      	b.n	80071ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d103      	bne.n	8007072 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2205      	movs	r2, #5
 800706e:	761a      	strb	r2, [r3, #24]
      break;
 8007070:	e09c      	b.n	80071ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b04      	cmp	r3, #4
 8007076:	f040 8099 	bne.w	80071ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220b      	movs	r2, #11
 800707e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	e092      	b.n	80071ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8d5 	bl	800723e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800709a:	b29a      	uxth	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2208      	movs	r2, #8
 80070a4:	761a      	strb	r2, [r3, #24]

      break;
 80070a6:	e086      	b.n	80071b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	791b      	ldrb	r3, [r3, #4]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fbc6 	bl	8007840 <USBH_LL_GetURBState>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d105      	bne.n	80070ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070c8:	e072      	b.n	80071b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d103      	bne.n	80070d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220b      	movs	r2, #11
 80070d4:	761a      	strb	r2, [r3, #24]
      break;
 80070d6:	e06b      	b.n	80071b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d168      	bne.n	80071b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80070de:	2303      	movs	r3, #3
 80070e0:	73fb      	strb	r3, [r7, #15]
      break;
 80070e2:	e065      	b.n	80071b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	795b      	ldrb	r3, [r3, #5]
 80070e8:	2201      	movs	r2, #1
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f87f 	bl	80071f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220a      	movs	r2, #10
 8007106:	761a      	strb	r2, [r3, #24]
      break;
 8007108:	e055      	b.n	80071b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	795b      	ldrb	r3, [r3, #5]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fb95 	bl	8007840 <USBH_LL_GetURBState>
 8007116:	4603      	mov	r3, r0
 8007118:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d105      	bne.n	800712c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	220d      	movs	r2, #13
 8007128:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800712a:	e043      	b.n	80071b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d103      	bne.n	800713a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2209      	movs	r2, #9
 8007136:	761a      	strb	r2, [r3, #24]
      break;
 8007138:	e03c      	b.n	80071b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b04      	cmp	r3, #4
 800713e:	d139      	bne.n	80071b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	220b      	movs	r2, #11
 8007144:	761a      	strb	r2, [r3, #24]
      break;
 8007146:	e035      	b.n	80071b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7e5b      	ldrb	r3, [r3, #25]
 800714c:	3301      	adds	r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	765a      	strb	r2, [r3, #25]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7e5b      	ldrb	r3, [r3, #25]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d806      	bhi.n	800716a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007168:	e025      	b.n	80071b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007170:	2106      	movs	r1, #6
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	795b      	ldrb	r3, [r3, #5]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f90c 	bl	80073a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	791b      	ldrb	r3, [r3, #4]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f906 	bl	80073a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	e00a      	b.n	80071b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80071a0:	bf00      	nop
 80071a2:	e008      	b.n	80071b6 <USBH_HandleControl+0x2de>
      break;
 80071a4:	bf00      	nop
 80071a6:	e006      	b.n	80071b6 <USBH_HandleControl+0x2de>
      break;
 80071a8:	bf00      	nop
 80071aa:	e004      	b.n	80071b6 <USBH_HandleControl+0x2de>
      break;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <USBH_HandleControl+0x2de>
      break;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <USBH_HandleControl+0x2de>
      break;
 80071b4:	bf00      	nop
  }

  return status;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af04      	add	r7, sp, #16
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80071ce:	79f9      	ldrb	r1, [r7, #7]
 80071d0:	2300      	movs	r3, #0
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	2308      	movs	r3, #8
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	2300      	movs	r3, #0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fafa 	bl	80077de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	460b      	mov	r3, r1
 8007204:	80fb      	strh	r3, [r7, #6]
 8007206:	4613      	mov	r3, r2
 8007208:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007218:	7979      	ldrb	r1, [r7, #5]
 800721a:	7e3b      	ldrb	r3, [r7, #24]
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	2301      	movs	r3, #1
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fad5 	bl	80077de <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b088      	sub	sp, #32
 8007242:	af04      	add	r7, sp, #16
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	4611      	mov	r1, r2
 800724a:	461a      	mov	r2, r3
 800724c:	460b      	mov	r3, r1
 800724e:	80fb      	strh	r3, [r7, #6]
 8007250:	4613      	mov	r3, r2
 8007252:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007254:	7979      	ldrb	r1, [r7, #5]
 8007256:	2300      	movs	r3, #0
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	2301      	movs	r3, #1
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2300      	movs	r3, #0
 8007268:	2201      	movs	r2, #1
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fab7 	bl	80077de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007270:	2300      	movs	r3, #0

}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b088      	sub	sp, #32
 800727e:	af04      	add	r7, sp, #16
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4611      	mov	r1, r2
 8007286:	461a      	mov	r2, r3
 8007288:	460b      	mov	r3, r1
 800728a:	80fb      	strh	r3, [r7, #6]
 800728c:	4613      	mov	r3, r2
 800728e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800729e:	7979      	ldrb	r1, [r7, #5]
 80072a0:	7e3b      	ldrb	r3, [r7, #24]
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	2301      	movs	r3, #1
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2302      	movs	r3, #2
 80072b2:	2200      	movs	r2, #0
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa92 	bl	80077de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af04      	add	r7, sp, #16
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	460b      	mov	r3, r1
 80072d4:	80fb      	strh	r3, [r7, #6]
 80072d6:	4613      	mov	r3, r2
 80072d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072da:	7979      	ldrb	r1, [r7, #5]
 80072dc:	2300      	movs	r3, #0
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	9302      	str	r3, [sp, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2302      	movs	r3, #2
 80072ee:	2201      	movs	r2, #1
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 fa74 	bl	80077de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af04      	add	r7, sp, #16
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	4608      	mov	r0, r1
 800730a:	4611      	mov	r1, r2
 800730c:	461a      	mov	r2, r3
 800730e:	4603      	mov	r3, r0
 8007310:	70fb      	strb	r3, [r7, #3]
 8007312:	460b      	mov	r3, r1
 8007314:	70bb      	strb	r3, [r7, #2]
 8007316:	4613      	mov	r3, r2
 8007318:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800731a:	7878      	ldrb	r0, [r7, #1]
 800731c:	78ba      	ldrb	r2, [r7, #2]
 800731e:	78f9      	ldrb	r1, [r7, #3]
 8007320:	8b3b      	ldrh	r3, [r7, #24]
 8007322:	9302      	str	r3, [sp, #8]
 8007324:	7d3b      	ldrb	r3, [r7, #20]
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	7c3b      	ldrb	r3, [r7, #16]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4603      	mov	r3, r0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa07 	bl	8007742 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa26 	bl	80077a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f836 	bl	80073dc <USBH_GetFreePipe>
 8007370:	4603      	mov	r3, r0
 8007372:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007374:	89fb      	ldrh	r3, [r7, #14]
 8007376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800737a:	4293      	cmp	r3, r2
 800737c:	d00a      	beq.n	8007394 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	33e0      	adds	r3, #224	; 0xe0
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	b2db      	uxtb	r3, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	2b0f      	cmp	r3, #15
 80073b0:	d80d      	bhi.n	80073ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	33e0      	adds	r3, #224	; 0xe0
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	33e0      	adds	r3, #224	; 0xe0
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	e00f      	b.n	800740e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	33e0      	adds	r3, #224	; 0xe0
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	b29b      	uxth	r3, r3
 8007406:	e007      	b.n	8007418 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	3301      	adds	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d9ec      	bls.n	80073ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007414:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007428:	2201      	movs	r2, #1
 800742a:	490e      	ldr	r1, [pc, #56]	; (8007464 <MX_USB_HOST_Init+0x40>)
 800742c:	480e      	ldr	r0, [pc, #56]	; (8007468 <MX_USB_HOST_Init+0x44>)
 800742e:	f7ff fb19 	bl	8006a64 <USBH_Init>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007438:	f7f9 fa74 	bl	8000924 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800743c:	490b      	ldr	r1, [pc, #44]	; (800746c <MX_USB_HOST_Init+0x48>)
 800743e:	480a      	ldr	r0, [pc, #40]	; (8007468 <MX_USB_HOST_Init+0x44>)
 8007440:	f7ff fbbd 	bl	8006bbe <USBH_RegisterClass>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800744a:	f7f9 fa6b 	bl	8000924 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800744e:	4806      	ldr	r0, [pc, #24]	; (8007468 <MX_USB_HOST_Init+0x44>)
 8007450:	f7ff fc41 	bl	8006cd6 <USBH_Start>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800745a:	f7f9 fa63 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	08007471 	.word	0x08007471
 8007468:	20000194 	.word	0x20000194
 800746c:	2000000c 	.word	0x2000000c

08007470 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	3b01      	subs	r3, #1
 8007480:	2b04      	cmp	r3, #4
 8007482:	d819      	bhi.n	80074b8 <USBH_UserProcess+0x48>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <USBH_UserProcess+0x1c>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074a9 	.word	0x080074a9
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074a1 	.word	0x080074a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <USBH_UserProcess+0x58>)
 80074a2:	2203      	movs	r2, #3
 80074a4:	701a      	strb	r2, [r3, #0]
  break;
 80074a6:	e008      	b.n	80074ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80074a8:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <USBH_UserProcess+0x58>)
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
  break;
 80074ae:	e004      	b.n	80074ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <USBH_UserProcess+0x58>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	701a      	strb	r2, [r3, #0]
  break;
 80074b6:	e000      	b.n	80074ba <USBH_UserProcess+0x4a>

  default:
  break;
 80074b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	2000056c 	.word	0x2000056c

080074cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ec:	d147      	bne.n	800757e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
 80074f2:	4b25      	ldr	r3, [pc, #148]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	4a24      	ldr	r2, [pc, #144]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	6313      	str	r3, [r2, #48]	; 0x30
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800750a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007510:	2300      	movs	r3, #0
 8007512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	4619      	mov	r1, r3
 800751e:	481b      	ldr	r0, [pc, #108]	; (800758c <HAL_HCD_MspInit+0xc0>)
 8007520:	f7f9 fda0 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007524:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752a:	2302      	movs	r3, #2
 800752c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007532:	2303      	movs	r3, #3
 8007534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007536:	230a      	movs	r3, #10
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800753a:	f107 0314 	add.w	r3, r7, #20
 800753e:	4619      	mov	r1, r3
 8007540:	4812      	ldr	r0, [pc, #72]	; (800758c <HAL_HCD_MspInit+0xc0>)
 8007542:	f7f9 fd8f 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007546:	4b10      	ldr	r3, [pc, #64]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 800754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007550:	6353      	str	r3, [r2, #52]	; 0x34
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 8007558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755a:	4a0b      	ldr	r2, [pc, #44]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 800755c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007560:	6453      	str	r3, [r2, #68]	; 0x44
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <HAL_HCD_MspInit+0xbc>)
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	2043      	movs	r0, #67	; 0x43
 8007574:	f7f9 fd3f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007578:	2043      	movs	r0, #67	; 0x43
 800757a:	f7f9 fd58 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800757e:	bf00      	nop
 8007580:	3728      	adds	r7, #40	; 0x28
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	40020000 	.word	0x40020000

08007590 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fbb8 	bl	8006d14 <USBH_LL_IncTimer>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fbf0 	bl	8006da0 <USBH_LL_Connect>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fbf9 	bl	8006dce <USBH_LL_Disconnect>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
 80075f0:	4613      	mov	r3, r2
 80075f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff fbaa 	bl	8006d68 <USBH_LL_PortEnabled>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fbaa 	bl	8006d84 <USBH_LL_PortDisabled>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007646:	2b01      	cmp	r3, #1
 8007648:	d12a      	bne.n	80076a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <USBH_LL_Init+0x74>)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <USBH_LL_Init+0x74>)
 8007656:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <USBH_LL_Init+0x74>)
 800765c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007660:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007662:	4b12      	ldr	r3, [pc, #72]	; (80076ac <USBH_LL_Init+0x74>)
 8007664:	2208      	movs	r2, #8
 8007666:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007668:	4b10      	ldr	r3, [pc, #64]	; (80076ac <USBH_LL_Init+0x74>)
 800766a:	2201      	movs	r2, #1
 800766c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <USBH_LL_Init+0x74>)
 8007670:	2200      	movs	r2, #0
 8007672:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007674:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <USBH_LL_Init+0x74>)
 8007676:	2202      	movs	r2, #2
 8007678:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <USBH_LL_Init+0x74>)
 800767c:	2200      	movs	r2, #0
 800767e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007680:	480a      	ldr	r0, [pc, #40]	; (80076ac <USBH_LL_Init+0x74>)
 8007682:	f7f9 fe8c 	bl	800139e <HAL_HCD_Init>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800768c:	f7f9 f94a 	bl	8000924 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007690:	4806      	ldr	r0, [pc, #24]	; (80076ac <USBH_LL_Init+0x74>)
 8007692:	f7fa fadf 	bl	8001c54 <HAL_HCD_GetCurrentFrame>
 8007696:	4603      	mov	r3, r0
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fb2b 	bl	8006cf6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000570 	.word	0x20000570

080076b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fa fa5a 	bl	8001b80 <HAL_HCD_Start>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f912 	bl	80078fc <USBH_Get_USB_Status>
 80076d8:	4603      	mov	r3, r0
 80076da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fa fa62 	bl	8001bc6 <HAL_HCD_Stop>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f8f7 	bl	80078fc <USBH_Get_USB_Status>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007712:	7bbb      	ldrb	r3, [r7, #14]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fa fa79 	bl	8001c2a <HAL_HCD_HC_GetXferCount>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007742:	b590      	push	{r4, r7, lr}
 8007744:	b089      	sub	sp, #36	; 0x24
 8007746:	af04      	add	r7, sp, #16
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	4608      	mov	r0, r1
 800774c:	4611      	mov	r1, r2
 800774e:	461a      	mov	r2, r3
 8007750:	4603      	mov	r3, r0
 8007752:	70fb      	strb	r3, [r7, #3]
 8007754:	460b      	mov	r3, r1
 8007756:	70bb      	strb	r3, [r7, #2]
 8007758:	4613      	mov	r3, r2
 800775a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800776a:	787c      	ldrb	r4, [r7, #1]
 800776c:	78ba      	ldrb	r2, [r7, #2]
 800776e:	78f9      	ldrb	r1, [r7, #3]
 8007770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007772:	9302      	str	r3, [sp, #8]
 8007774:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4623      	mov	r3, r4
 8007782:	f7f9 fe73 	bl	800146c <HAL_HCD_HC_Init>
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	4618      	mov	r0, r3
 800778e:	f000 f8b5 	bl	80078fc <USBH_Get_USB_Status>
 8007792:	4603      	mov	r3, r0
 8007794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007796:	7bbb      	ldrb	r3, [r7, #14]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bd90      	pop	{r4, r7, pc}

080077a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f7f9 ff0c 	bl	80015dc <HAL_HCD_HC_Halt>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f896 	bl	80078fc <USBH_Get_USB_Status>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b089      	sub	sp, #36	; 0x24
 80077e2:	af04      	add	r7, sp, #16
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	4608      	mov	r0, r1
 80077e8:	4611      	mov	r1, r2
 80077ea:	461a      	mov	r2, r3
 80077ec:	4603      	mov	r3, r0
 80077ee:	70fb      	strb	r3, [r7, #3]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70bb      	strb	r3, [r7, #2]
 80077f4:	4613      	mov	r3, r2
 80077f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007806:	787c      	ldrb	r4, [r7, #1]
 8007808:	78ba      	ldrb	r2, [r7, #2]
 800780a:	78f9      	ldrb	r1, [r7, #3]
 800780c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007814:	9302      	str	r3, [sp, #8]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4623      	mov	r3, r4
 8007822:	f7f9 feff 	bl	8001624 <HAL_HCD_HC_SubmitRequest>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f865 	bl	80078fc <USBH_Get_USB_Status>
 8007832:	4603      	mov	r3, r0
 8007834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007836:	7bbb      	ldrb	r3, [r7, #14]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bd90      	pop	{r4, r7, pc}

08007840 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7fa f9d2 	bl	8001c00 <HAL_HCD_HC_GetURBState>
 800785c:	4603      	mov	r3, r0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007878:	2b01      	cmp	r3, #1
 800787a:	d103      	bne.n	8007884 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f868 	bl	8007954 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007884:	20c8      	movs	r0, #200	; 0xc8
 8007886:	f7f9 fab7 	bl	8000df8 <HAL_Delay>
  return USBH_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
 80078a0:	4613      	mov	r3, r2
 80078a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	4613      	mov	r3, r2
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	3317      	adds	r3, #23
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	68f9      	ldr	r1, [r7, #12]
 80078c6:	4613      	mov	r3, r2
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	333c      	adds	r3, #60	; 0x3c
 80078d2:	78ba      	ldrb	r2, [r7, #2]
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e009      	b.n	80078ec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	4613      	mov	r3, r2
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	333d      	adds	r3, #61	; 0x3d
 80078e8:	78ba      	ldrb	r2, [r7, #2]
 80078ea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d817      	bhi.n	8007940 <USBH_Get_USB_Status+0x44>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USBH_Get_USB_Status+0x1c>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007929 	.word	0x08007929
 800791c:	0800792f 	.word	0x0800792f
 8007920:	08007935 	.word	0x08007935
 8007924:	0800793b 	.word	0x0800793b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	e00b      	b.n	8007946 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
    break;
 8007932:	e008      	b.n	8007946 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007934:	2301      	movs	r3, #1
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	e005      	b.n	8007946 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800793a:	2302      	movs	r3, #2
 800793c:	73fb      	strb	r3, [r7, #15]
    break;
 800793e:	e002      	b.n	8007946 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007940:	2302      	movs	r3, #2
 8007942:	73fb      	strb	r3, [r7, #15]
    break;
 8007944:	bf00      	nop
  }
  return usb_status;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	e001      	b.n	8007972 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800796e:	2301      	movs	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	461a      	mov	r2, r3
 8007976:	2101      	movs	r1, #1
 8007978:	4803      	ldr	r0, [pc, #12]	; (8007988 <MX_DriverVbusFS+0x34>)
 800797a:	f7f9 fcf7 	bl	800136c <HAL_GPIO_WritePin>
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40020800 	.word	0x40020800

0800798c <malloc>:
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <malloc+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f000 b82b 	b.w	80079ec <_malloc_r>
 8007996:	bf00      	nop
 8007998:	20000078 	.word	0x20000078

0800799c <free>:
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <free+0xc>)
 800799e:	4601      	mov	r1, r0
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f000 b8f3 	b.w	8007b8c <_free_r>
 80079a6:	bf00      	nop
 80079a8:	20000078 	.word	0x20000078

080079ac <sbrk_aligned>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4e0e      	ldr	r6, [pc, #56]	; (80079e8 <sbrk_aligned+0x3c>)
 80079b0:	460c      	mov	r4, r1
 80079b2:	6831      	ldr	r1, [r6, #0]
 80079b4:	4605      	mov	r5, r0
 80079b6:	b911      	cbnz	r1, 80079be <sbrk_aligned+0x12>
 80079b8:	f000 f8ac 	bl	8007b14 <_sbrk_r>
 80079bc:	6030      	str	r0, [r6, #0]
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 f8a7 	bl	8007b14 <_sbrk_r>
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d00a      	beq.n	80079e0 <sbrk_aligned+0x34>
 80079ca:	1cc4      	adds	r4, r0, #3
 80079cc:	f024 0403 	bic.w	r4, r4, #3
 80079d0:	42a0      	cmp	r0, r4
 80079d2:	d007      	beq.n	80079e4 <sbrk_aligned+0x38>
 80079d4:	1a21      	subs	r1, r4, r0
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f89c 	bl	8007b14 <_sbrk_r>
 80079dc:	3001      	adds	r0, #1
 80079de:	d101      	bne.n	80079e4 <sbrk_aligned+0x38>
 80079e0:	f04f 34ff 	mov.w	r4, #4294967295
 80079e4:	4620      	mov	r0, r4
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	20000954 	.word	0x20000954

080079ec <_malloc_r>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	1ccd      	adds	r5, r1, #3
 80079f2:	f025 0503 	bic.w	r5, r5, #3
 80079f6:	3508      	adds	r5, #8
 80079f8:	2d0c      	cmp	r5, #12
 80079fa:	bf38      	it	cc
 80079fc:	250c      	movcc	r5, #12
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	4607      	mov	r7, r0
 8007a02:	db01      	blt.n	8007a08 <_malloc_r+0x1c>
 8007a04:	42a9      	cmp	r1, r5
 8007a06:	d905      	bls.n	8007a14 <_malloc_r+0x28>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	4630      	mov	r0, r6
 8007a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ae8 <_malloc_r+0xfc>
 8007a18:	f000 f868 	bl	8007aec <__malloc_lock>
 8007a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a20:	461c      	mov	r4, r3
 8007a22:	bb5c      	cbnz	r4, 8007a7c <_malloc_r+0x90>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ffc0 	bl	80079ac <sbrk_aligned>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	4604      	mov	r4, r0
 8007a30:	d155      	bne.n	8007ade <_malloc_r+0xf2>
 8007a32:	f8d8 4000 	ldr.w	r4, [r8]
 8007a36:	4626      	mov	r6, r4
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	d145      	bne.n	8007ac8 <_malloc_r+0xdc>
 8007a3c:	2c00      	cmp	r4, #0
 8007a3e:	d048      	beq.n	8007ad2 <_malloc_r+0xe6>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	4631      	mov	r1, r6
 8007a44:	4638      	mov	r0, r7
 8007a46:	eb04 0903 	add.w	r9, r4, r3
 8007a4a:	f000 f863 	bl	8007b14 <_sbrk_r>
 8007a4e:	4581      	cmp	r9, r0
 8007a50:	d13f      	bne.n	8007ad2 <_malloc_r+0xe6>
 8007a52:	6821      	ldr	r1, [r4, #0]
 8007a54:	1a6d      	subs	r5, r5, r1
 8007a56:	4629      	mov	r1, r5
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff ffa7 	bl	80079ac <sbrk_aligned>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d037      	beq.n	8007ad2 <_malloc_r+0xe6>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	442b      	add	r3, r5
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d038      	beq.n	8007ae2 <_malloc_r+0xf6>
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	42a2      	cmp	r2, r4
 8007a74:	d12b      	bne.n	8007ace <_malloc_r+0xe2>
 8007a76:	2200      	movs	r2, #0
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	e00f      	b.n	8007a9c <_malloc_r+0xb0>
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	1b52      	subs	r2, r2, r5
 8007a80:	d41f      	bmi.n	8007ac2 <_malloc_r+0xd6>
 8007a82:	2a0b      	cmp	r2, #11
 8007a84:	d917      	bls.n	8007ab6 <_malloc_r+0xca>
 8007a86:	1961      	adds	r1, r4, r5
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	6025      	str	r5, [r4, #0]
 8007a8c:	bf18      	it	ne
 8007a8e:	6059      	strne	r1, [r3, #4]
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	bf08      	it	eq
 8007a94:	f8c8 1000 	streq.w	r1, [r8]
 8007a98:	5162      	str	r2, [r4, r5]
 8007a9a:	604b      	str	r3, [r1, #4]
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f104 060b 	add.w	r6, r4, #11
 8007aa2:	f000 f829 	bl	8007af8 <__malloc_unlock>
 8007aa6:	f026 0607 	bic.w	r6, r6, #7
 8007aaa:	1d23      	adds	r3, r4, #4
 8007aac:	1af2      	subs	r2, r6, r3
 8007aae:	d0ae      	beq.n	8007a0e <_malloc_r+0x22>
 8007ab0:	1b9b      	subs	r3, r3, r6
 8007ab2:	50a3      	str	r3, [r4, r2]
 8007ab4:	e7ab      	b.n	8007a0e <_malloc_r+0x22>
 8007ab6:	42a3      	cmp	r3, r4
 8007ab8:	6862      	ldr	r2, [r4, #4]
 8007aba:	d1dd      	bne.n	8007a78 <_malloc_r+0x8c>
 8007abc:	f8c8 2000 	str.w	r2, [r8]
 8007ac0:	e7ec      	b.n	8007a9c <_malloc_r+0xb0>
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	6864      	ldr	r4, [r4, #4]
 8007ac6:	e7ac      	b.n	8007a22 <_malloc_r+0x36>
 8007ac8:	4634      	mov	r4, r6
 8007aca:	6876      	ldr	r6, [r6, #4]
 8007acc:	e7b4      	b.n	8007a38 <_malloc_r+0x4c>
 8007ace:	4613      	mov	r3, r2
 8007ad0:	e7cc      	b.n	8007a6c <_malloc_r+0x80>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f000 f80e 	bl	8007af8 <__malloc_unlock>
 8007adc:	e797      	b.n	8007a0e <_malloc_r+0x22>
 8007ade:	6025      	str	r5, [r4, #0]
 8007ae0:	e7dc      	b.n	8007a9c <_malloc_r+0xb0>
 8007ae2:	605b      	str	r3, [r3, #4]
 8007ae4:	deff      	udf	#255	; 0xff
 8007ae6:	bf00      	nop
 8007ae8:	20000950 	.word	0x20000950

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__malloc_lock+0x8>)
 8007aee:	f000 b84b 	b.w	8007b88 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20000a94 	.word	0x20000a94

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f000 b846 	b.w	8007b8a <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20000a94 	.word	0x20000a94

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <_sbrk_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d06      	ldr	r5, [pc, #24]	; (8007b30 <_sbrk_r+0x1c>)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7f9 f886 	bl	8000c30 <_sbrk>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_sbrk_r+0x1a>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_sbrk_r+0x1a>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20000a90 	.word	0x20000a90

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000078 	.word	0x20000078

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f000 f866 	bl	8007c24 <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08007c60 	.word	0x08007c60
 8007b7c:	08007c60 	.word	0x08007c60
 8007b80:	08007c60 	.word	0x08007c60
 8007b84:	08007c64 	.word	0x08007c64

08007b88 <__retarget_lock_acquire_recursive>:
 8007b88:	4770      	bx	lr

08007b8a <__retarget_lock_release_recursive>:
 8007b8a:	4770      	bx	lr

08007b8c <_free_r>:
 8007b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	d044      	beq.n	8007c1c <_free_r+0x90>
 8007b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b96:	9001      	str	r0, [sp, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b9e:	bfb8      	it	lt
 8007ba0:	18e4      	addlt	r4, r4, r3
 8007ba2:	f7ff ffa3 	bl	8007aec <__malloc_lock>
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <_free_r+0x94>)
 8007ba8:	9801      	ldr	r0, [sp, #4]
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	b933      	cbnz	r3, 8007bbc <_free_r+0x30>
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	6014      	str	r4, [r2, #0]
 8007bb2:	b003      	add	sp, #12
 8007bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bb8:	f7ff bf9e 	b.w	8007af8 <__malloc_unlock>
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d908      	bls.n	8007bd2 <_free_r+0x46>
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	1961      	adds	r1, r4, r5
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf01      	itttt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	1949      	addeq	r1, r1, r5
 8007bce:	6021      	streq	r1, [r4, #0]
 8007bd0:	e7ed      	b.n	8007bae <_free_r+0x22>
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b10b      	cbz	r3, 8007bdc <_free_r+0x50>
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d9fa      	bls.n	8007bd2 <_free_r+0x46>
 8007bdc:	6811      	ldr	r1, [r2, #0]
 8007bde:	1855      	adds	r5, r2, r1
 8007be0:	42a5      	cmp	r5, r4
 8007be2:	d10b      	bne.n	8007bfc <_free_r+0x70>
 8007be4:	6824      	ldr	r4, [r4, #0]
 8007be6:	4421      	add	r1, r4
 8007be8:	1854      	adds	r4, r2, r1
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	d1e0      	bne.n	8007bb2 <_free_r+0x26>
 8007bf0:	681c      	ldr	r4, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	6053      	str	r3, [r2, #4]
 8007bf6:	440c      	add	r4, r1
 8007bf8:	6014      	str	r4, [r2, #0]
 8007bfa:	e7da      	b.n	8007bb2 <_free_r+0x26>
 8007bfc:	d902      	bls.n	8007c04 <_free_r+0x78>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	e7d6      	b.n	8007bb2 <_free_r+0x26>
 8007c04:	6825      	ldr	r5, [r4, #0]
 8007c06:	1961      	adds	r1, r4, r5
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf04      	itt	eq
 8007c0c:	6819      	ldreq	r1, [r3, #0]
 8007c0e:	685b      	ldreq	r3, [r3, #4]
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	bf04      	itt	eq
 8007c14:	1949      	addeq	r1, r1, r5
 8007c16:	6021      	streq	r1, [r4, #0]
 8007c18:	6054      	str	r4, [r2, #4]
 8007c1a:	e7ca      	b.n	8007bb2 <_free_r+0x26>
 8007c1c:	b003      	add	sp, #12
 8007c1e:	bd30      	pop	{r4, r5, pc}
 8007c20:	20000950 	.word	0x20000950

08007c24 <_init>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	bf00      	nop
 8007c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2a:	bc08      	pop	{r3}
 8007c2c:	469e      	mov	lr, r3
 8007c2e:	4770      	bx	lr

08007c30 <_fini>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr
